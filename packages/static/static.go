// Code generated by go-bindata.
// sources:
// static/1block.bin
// static/css/AS3Cam.css
// static/css/Jcrop.gif
// static/css/bootstrap-modal.css
// static/css/bootstrap-responsive.css
// static/css/bootstrap.css
// static/css/bootstrap.min.css
// static/css/cf.css
// static/css/cropper.css
// static/css/dataTables.bootstrap.css
// static/css/font-awesome.css
// static/css/jquery-ui-timepicker-addon.css
// static/css/jquery-ui.css
// static/css/jquery.Jcrop.css
// static/css/jquery.Jcrop.min.css
// static/css/jquery.css
// static/css/jquery.qtip.min.css
// static/css/plugins/metisMenu/metisMenu.min.css
// static/css/progress.css
// static/css/sb-admin-2.css
// static/css/sb-admin.css
// static/css/social-buttons.css
// static/css/tooltipster-shadow.css
// static/css/tooltipster.css
// static/css/upgrade.css
// static/fonts/FontAwesome.otf
// static/fonts/OpenSans-Regular.ttf
// static/fonts/fontawesome-webfont.eot
// static/fonts/fontawesome-webfont.svg
// static/fonts/fontawesome-webfont.ttf
// static/fonts/fontawesome-webfont.woff
// static/fonts/luxisr.ttf
// static/img/.directory
// static/img/alert.png
// static/img/anonim.png
// static/img/blank.png
// static/img/cf_blurb_img.png
// static/img/face.jpg
// static/img/glyphicons-halflings.png
// static/img/k_bg.png
// static/img/k_bg.psd
// static/img/k_bg_pass.png
// static/img/k_db_pass.psd
// static/img/load.gif
// static/img/logo-2.png
// static/img/logo-small.png
// static/img/logo.png
// static/img/main_loader.gif
// static/img/noavatar.png
// static/img/pers.jpg
// static/img/photo.png
// static/img/profile.jpg
// static/img/progress.gif
// static/img/race.gif
// static/img/race_1.png
// static/img/race_2.png
// static/img/race_3.png
// static/img/rolling.gif
// static/img/squares.gif
// static/img/squares2.gif
// static/img/stat.png
// static/img/us-ru.png
// static/js/Serpent.js
// static/js/aes.js
// static/js/asn1hex-1.1.js
// static/js/asn1hex-1.1.min.js
// static/js/asn1hex-1.js
// static/js/base64.js
// static/js/bootstrap-alert.js
// static/js/bootstrap-button.js
// static/js/bootstrap-carousel.js
// static/js/bootstrap-collapse.js
// static/js/bootstrap-dropdown.js
// static/js/bootstrap-modal.js
// static/js/bootstrap-popover.js
// static/js/bootstrap-scrollspy.js
// static/js/bootstrap-tab.js
// static/js/bootstrap-tooltip.js
// static/js/bootstrap-transition.js
// static/js/bootstrap-typeahead.js
// static/js/bootstrap.min.js
// static/js/chat.js
// static/js/cropper.js
// static/js/crypto-js-aes.js
// static/js/crypto-js-mode-ecb.js
// static/js/crypto-js-pad-iso10126.js
// static/js/dataTables.bootstrap.js
// static/js/demo/flot-demo.js
// static/js/enc-base64-min.js
// static/js/hex2a.js
// static/js/html5shiv.js
// static/js/index.js
// static/js/infobubble.js
// static/js/jquery-1.10.2.js
// static/js/jquery-1.11.0.js
// static/js/jquery-1.9.1.min.js
// static/js/jquery-ui-sliderAccess.js
// static/js/jquery-ui-timepicker-addon.js
// static/js/jquery-ui.min.js
// static/js/jquery.Jcrop.js
// static/js/jquery.dataTables.js
// static/js/jquery.flot.js
// static/js/jquery.js
// static/js/jquery.metisMenu.js
// static/js/jquery.min.js
// static/js/jquery.qtip.min.js
// static/js/jquery.tooltipster.min.js
// static/js/jquery.webcam.as3.js
// static/js/jquery_002.js
// static/js/js.js
// static/js/jsbn.js
// static/js/jsbn2.js
// static/js/markerclusterer.js
// static/js/mcrypt.js
// static/js/md5.js
// static/js/plugins/flot/excanvas.min.js
// static/js/plugins/flot/jquery.flot.js
// static/js/plugins/flot/jquery.flot.pie.js
// static/js/plugins/flot/jquery.flot.resize.js
// static/js/plugins/flot/jquery.flot.tooltip.min.js
// static/js/plugins/metisMenu/metisMenu.min.js
// static/js/plugins/modal/bootstrap-modal.js
// static/js/plugins/modal/bootstrap-modalmanager.js
// static/js/prng4.js
// static/js/respond.min.js
// static/js/rijndael.js
// static/js/ripemd160.js
// static/js/rng.js
// static/js/rsa.js
// static/js/rsa2.js
// static/js/rsapem-1.1.js
// static/js/rsapem-1.1.min.js
// static/js/rsapem-1.js
// static/js/rsasign-1.2.js
// static/js/rsasign-1.2.min.js
// static/js/rsasign-1.js
// static/js/sAS3Cam.js
// static/js/sb-admin-2.js
// static/js/sb-admin.js
// static/js/sha1.js
// static/js/sha256.js
// static/js/sha512.js
// static/js/spin.js
// static/js/spots.js
// static/js/stacktable.js
// static/js/unixtime.js
// static/js/uploader.js
// static/js/worker.js
// static/js/x509-1.1.js
// static/js/x509-1.1.min.js
// static/js/youtube_webcam.js
// static/lang/1.ini
// static/lang/42.ini
// static/lang/en-us.all.json
// static/lang/locale_en-US.ini
// static/lang/locale_ru-RU.ini
// static/nodes.inc
// static/swf/sAS3Cam.swf
// static/templates/.directory
// static/templates/abuse.html
// static/templates/add_cf_project_data.html
// static/templates/admin_variables.html
// static/templates/alert_success.html
// static/templates/arbitration.html
// static/templates/arbitration_arbitrator.html
// static/templates/arbitration_buyer.html
// static/templates/arbitration_seller.html
// static/templates/assignments.html
// static/templates/assignments_new_miner.html
// static/templates/assignments_promised_amount.html
// static/templates/auto_payments.html
// static/templates/available_keys.html
// static/templates/block_explorer.html
// static/templates/bug_reporting.html
// static/templates/cash_request_in.html
// static/templates/cash_request_out.html
// static/templates/cf_catalog.html
// static/templates/cf_page_preview.html
// static/templates/cf_project_change_category.html
// static/templates/cf_start.html
// static/templates/change_arbitrator_conditions.html
// static/templates/change_avatar.html
// static/templates/change_commission.html
// static/templates/change_country_race.html
// static/templates/change_creditor.html
// static/templates/change_geolocation.html
// static/templates/change_host.html
// static/templates/change_key_close.html
// static/templates/change_key_request.html
// static/templates/change_money_back_time.html
// static/templates/change_node_key.html
// static/templates/change_pool.html
// static/templates/change_primary_key.html
// static/templates/change_promised_amount.html
// static/templates/chat.html
// static/templates/credits.html
// static/templates/currency_exchange.html
// static/templates/currency_exchange_delete.html
// static/templates/db_info.html
// static/templates/db_info_nodes.html
// static/templates/del_cf_funding.html
// static/templates/del_cf_project.html
// static/templates/del_credit.html
// static/templates/del_pool_user.html
// static/templates/del_promised_amount.html
// static/templates/e_main.html
// static/templates/e_my_finance.html
// static/templates/e_my_history.html
// static/templates/e_my_orders.html
// static/templates/e_pages.html
// static/templates/e_redirect.html
// static/templates/exchange_admin.html
// static/templates/first_select.html
// static/templates/for_repaid_fix.html
// static/templates/holidays_list.html
// static/templates/home.html
// static/templates/home0.html
// static/templates/index.html
// static/templates/index_cf.html
// static/templates/index_e.html
// static/templates/information.html
// static/templates/install_step_0.html
// static/templates/install_step_1.html
// static/templates/interface.html
// static/templates/login.html
// static/templates/menu.html
// static/templates/mining_menu.html
// static/templates/mining_promised_amount.html
// static/templates/modal.html
// static/templates/money_back.html
// static/templates/money_back_request.html
// static/templates/my_cf_projects.html
// static/templates/new_auto_payment.html
// static/templates/new_cf_project.html
// static/templates/new_credit.html
// static/templates/new_holidays.html
// static/templates/new_promised_amount.html
// static/templates/new_user.html
// static/templates/node_config.html
// static/templates/notifications.html
// static/templates/points.html
// static/templates/pool_admin.html
// static/templates/pool_admin_login.html
// static/templates/progress.html
// static/templates/progress_bar.html
// static/templates/promised_amount_actualization.html
// static/templates/promised_amount_list.html
// static/templates/repayment_credit.html
// static/templates/restoring_access.html
// static/templates/rewrite_primary_key.html
// static/templates/set_password.html
// static/templates/setup_password.html
// static/templates/sign_up_in_the_pool.html
// static/templates/signatures.html
// static/templates/statistic.html
// static/templates/statistic_voting.html
// static/templates/updating_blockchain.html
// static/templates/upgrade.html
// static/templates/upgrade_0.html
// static/templates/upgrade_1_and_2.html
// static/templates/upgrade_3.html
// static/templates/upgrade_4.html
// static/templates/upgrade_5.html
// static/templates/upgrade_6.html
// static/templates/upgrade_7.html
// static/templates/upgrade_resend.html
// static/templates/vote_for_me.html
// static/templates/votes_exchange.html
// static/templates/voting.html
// static/templates/waiting_accept_new_key.html
// static/templates/wallets_list.html
// DO NOT EDIT!

package static

import (
	"fmt"
	"io/ioutil"
	"strings"
	"os"
	"path/filepath"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// static1blockBin reads file data from disk. It returns an error on failure.
func static1blockBin() (*asset, error) {
	path := "/dc/static/1block.bin"
	name := "static/1block.bin"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssAs3camCss reads file data from disk. It returns an error on failure.
func staticCssAs3camCss() (*asset, error) {
	path := "/dc/static/css/AS3Cam.css"
	name := "static/css/AS3Cam.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJcropGif reads file data from disk. It returns an error on failure.
func staticCssJcropGif() (*asset, error) {
	path := "/dc/static/css/Jcrop.gif"
	name := "static/css/Jcrop.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapModalCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapModalCss() (*asset, error) {
	path := "/dc/static/css/bootstrap-modal.css"
	name := "static/css/bootstrap-modal.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapResponsiveCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapResponsiveCss() (*asset, error) {
	path := "/dc/static/css/bootstrap-responsive.css"
	name := "static/css/bootstrap-responsive.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapCss() (*asset, error) {
	path := "/dc/static/css/bootstrap.css"
	name := "static/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapMinCss() (*asset, error) {
	path := "/dc/static/css/bootstrap.min.css"
	name := "static/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssCfCss reads file data from disk. It returns an error on failure.
func staticCssCfCss() (*asset, error) {
	path := "/dc/static/css/cf.css"
	name := "static/css/cf.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssCropperCss reads file data from disk. It returns an error on failure.
func staticCssCropperCss() (*asset, error) {
	path := "/dc/static/css/cropper.css"
	name := "static/css/cropper.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssDatatablesBootstrapCss reads file data from disk. It returns an error on failure.
func staticCssDatatablesBootstrapCss() (*asset, error) {
	path := "/dc/static/css/dataTables.bootstrap.css"
	name := "static/css/dataTables.bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontAwesomeCss reads file data from disk. It returns an error on failure.
func staticCssFontAwesomeCss() (*asset, error) {
	path := "/dc/static/css/font-awesome.css"
	name := "static/css/font-awesome.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryUiTimepickerAddonCss reads file data from disk. It returns an error on failure.
func staticCssJqueryUiTimepickerAddonCss() (*asset, error) {
	path := "/dc/static/css/jquery-ui-timepicker-addon.css"
	name := "static/css/jquery-ui-timepicker-addon.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryUiCss reads file data from disk. It returns an error on failure.
func staticCssJqueryUiCss() (*asset, error) {
	path := "/dc/static/css/jquery-ui.css"
	name := "static/css/jquery-ui.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryJcropCss reads file data from disk. It returns an error on failure.
func staticCssJqueryJcropCss() (*asset, error) {
	path := "/dc/static/css/jquery.Jcrop.css"
	name := "static/css/jquery.Jcrop.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryJcropMinCss reads file data from disk. It returns an error on failure.
func staticCssJqueryJcropMinCss() (*asset, error) {
	path := "/dc/static/css/jquery.Jcrop.min.css"
	name := "static/css/jquery.Jcrop.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryCss reads file data from disk. It returns an error on failure.
func staticCssJqueryCss() (*asset, error) {
	path := "/dc/static/css/jquery.css"
	name := "static/css/jquery.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJqueryQtipMinCss reads file data from disk. It returns an error on failure.
func staticCssJqueryQtipMinCss() (*asset, error) {
	path := "/dc/static/css/jquery.qtip.min.css"
	name := "static/css/jquery.qtip.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssPluginsMetismenuMetismenuMinCss reads file data from disk. It returns an error on failure.
func staticCssPluginsMetismenuMetismenuMinCss() (*asset, error) {
	path := "/dc/static/css/plugins/metisMenu/metisMenu.min.css"
	name := "static/css/plugins/metisMenu/metisMenu.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssProgressCss reads file data from disk. It returns an error on failure.
func staticCssProgressCss() (*asset, error) {
	path := "/dc/static/css/progress.css"
	name := "static/css/progress.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssSbAdmin2Css reads file data from disk. It returns an error on failure.
func staticCssSbAdmin2Css() (*asset, error) {
	path := "/dc/static/css/sb-admin-2.css"
	name := "static/css/sb-admin-2.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssSbAdminCss reads file data from disk. It returns an error on failure.
func staticCssSbAdminCss() (*asset, error) {
	path := "/dc/static/css/sb-admin.css"
	name := "static/css/sb-admin.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssSocialButtonsCss reads file data from disk. It returns an error on failure.
func staticCssSocialButtonsCss() (*asset, error) {
	path := "/dc/static/css/social-buttons.css"
	name := "static/css/social-buttons.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssTooltipsterShadowCss reads file data from disk. It returns an error on failure.
func staticCssTooltipsterShadowCss() (*asset, error) {
	path := "/dc/static/css/tooltipster-shadow.css"
	name := "static/css/tooltipster-shadow.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssTooltipsterCss reads file data from disk. It returns an error on failure.
func staticCssTooltipsterCss() (*asset, error) {
	path := "/dc/static/css/tooltipster.css"
	name := "static/css/tooltipster.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssUpgradeCss reads file data from disk. It returns an error on failure.
func staticCssUpgradeCss() (*asset, error) {
	path := "/dc/static/css/upgrade.css"
	name := "static/css/upgrade.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeOtf reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeOtf() (*asset, error) {
	path := "/dc/static/fonts/FontAwesome.otf"
	name := "static/fonts/FontAwesome.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsOpensansRegularTtf reads file data from disk. It returns an error on failure.
func staticFontsOpensansRegularTtf() (*asset, error) {
	path := "/dc/static/fonts/OpenSans-Regular.ttf"
	name := "static/fonts/OpenSans-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontEot() (*asset, error) {
	path := "/dc/static/fonts/fontawesome-webfont.eot"
	name := "static/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontSvg() (*asset, error) {
	path := "/dc/static/fonts/fontawesome-webfont.svg"
	name := "static/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontTtf() (*asset, error) {
	path := "/dc/static/fonts/fontawesome-webfont.ttf"
	name := "static/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontWoff() (*asset, error) {
	path := "/dc/static/fonts/fontawesome-webfont.woff"
	name := "static/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsLuxisrTtf reads file data from disk. It returns an error on failure.
func staticFontsLuxisrTtf() (*asset, error) {
	path := "/dc/static/fonts/luxisr.ttf"
	name := "static/fonts/luxisr.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgDirectory reads file data from disk. It returns an error on failure.
func staticImgDirectory() (*asset, error) {
	path := "/dc/static/img/.directory"
	name := "static/img/.directory"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgAlertPng reads file data from disk. It returns an error on failure.
func staticImgAlertPng() (*asset, error) {
	path := "/dc/static/img/alert.png"
	name := "static/img/alert.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgAnonimPng reads file data from disk. It returns an error on failure.
func staticImgAnonimPng() (*asset, error) {
	path := "/dc/static/img/anonim.png"
	name := "static/img/anonim.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBlankPng reads file data from disk. It returns an error on failure.
func staticImgBlankPng() (*asset, error) {
	path := "/dc/static/img/blank.png"
	name := "static/img/blank.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgCf_blurb_imgPng reads file data from disk. It returns an error on failure.
func staticImgCf_blurb_imgPng() (*asset, error) {
	path := "/dc/static/img/cf_blurb_img.png"
	name := "static/img/cf_blurb_img.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgFaceJpg reads file data from disk. It returns an error on failure.
func staticImgFaceJpg() (*asset, error) {
	path := "/dc/static/img/face.jpg"
	name := "static/img/face.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgGlyphiconsHalflingsPng reads file data from disk. It returns an error on failure.
func staticImgGlyphiconsHalflingsPng() (*asset, error) {
	path := "/dc/static/img/glyphicons-halflings.png"
	name := "static/img/glyphicons-halflings.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgK_bgPng reads file data from disk. It returns an error on failure.
func staticImgK_bgPng() (*asset, error) {
	path := "/dc/static/img/k_bg.png"
	name := "static/img/k_bg.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgK_bgPsd reads file data from disk. It returns an error on failure.
func staticImgK_bgPsd() (*asset, error) {
	path := "/dc/static/img/k_bg.psd"
	name := "static/img/k_bg.psd"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgK_bg_passPng reads file data from disk. It returns an error on failure.
func staticImgK_bg_passPng() (*asset, error) {
	path := "/dc/static/img/k_bg_pass.png"
	name := "static/img/k_bg_pass.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgK_db_passPsd reads file data from disk. It returns an error on failure.
func staticImgK_db_passPsd() (*asset, error) {
	path := "/dc/static/img/k_db_pass.psd"
	name := "static/img/k_db_pass.psd"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLoadGif reads file data from disk. It returns an error on failure.
func staticImgLoadGif() (*asset, error) {
	path := "/dc/static/img/load.gif"
	name := "static/img/load.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLogo2Png reads file data from disk. It returns an error on failure.
func staticImgLogo2Png() (*asset, error) {
	path := "/dc/static/img/logo-2.png"
	name := "static/img/logo-2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLogoSmallPng reads file data from disk. It returns an error on failure.
func staticImgLogoSmallPng() (*asset, error) {
	path := "/dc/static/img/logo-small.png"
	name := "static/img/logo-small.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLogoPng reads file data from disk. It returns an error on failure.
func staticImgLogoPng() (*asset, error) {
	path := "/dc/static/img/logo.png"
	name := "static/img/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgMain_loaderGif reads file data from disk. It returns an error on failure.
func staticImgMain_loaderGif() (*asset, error) {
	path := "/dc/static/img/main_loader.gif"
	name := "static/img/main_loader.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgNoavatarPng reads file data from disk. It returns an error on failure.
func staticImgNoavatarPng() (*asset, error) {
	path := "/dc/static/img/noavatar.png"
	name := "static/img/noavatar.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgPersJpg reads file data from disk. It returns an error on failure.
func staticImgPersJpg() (*asset, error) {
	path := "/dc/static/img/pers.jpg"
	name := "static/img/pers.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgPhotoPng reads file data from disk. It returns an error on failure.
func staticImgPhotoPng() (*asset, error) {
	path := "/dc/static/img/photo.png"
	name := "static/img/photo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgProfileJpg reads file data from disk. It returns an error on failure.
func staticImgProfileJpg() (*asset, error) {
	path := "/dc/static/img/profile.jpg"
	name := "static/img/profile.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgProgressGif reads file data from disk. It returns an error on failure.
func staticImgProgressGif() (*asset, error) {
	path := "/dc/static/img/progress.gif"
	name := "static/img/progress.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgRaceGif reads file data from disk. It returns an error on failure.
func staticImgRaceGif() (*asset, error) {
	path := "/dc/static/img/race.gif"
	name := "static/img/race.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgRace_1Png reads file data from disk. It returns an error on failure.
func staticImgRace_1Png() (*asset, error) {
	path := "/dc/static/img/race_1.png"
	name := "static/img/race_1.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgRace_2Png reads file data from disk. It returns an error on failure.
func staticImgRace_2Png() (*asset, error) {
	path := "/dc/static/img/race_2.png"
	name := "static/img/race_2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgRace_3Png reads file data from disk. It returns an error on failure.
func staticImgRace_3Png() (*asset, error) {
	path := "/dc/static/img/race_3.png"
	name := "static/img/race_3.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgRollingGif reads file data from disk. It returns an error on failure.
func staticImgRollingGif() (*asset, error) {
	path := "/dc/static/img/rolling.gif"
	name := "static/img/rolling.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgSquaresGif reads file data from disk. It returns an error on failure.
func staticImgSquaresGif() (*asset, error) {
	path := "/dc/static/img/squares.gif"
	name := "static/img/squares.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgSquares2Gif reads file data from disk. It returns an error on failure.
func staticImgSquares2Gif() (*asset, error) {
	path := "/dc/static/img/squares2.gif"
	name := "static/img/squares2.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgStatPng reads file data from disk. It returns an error on failure.
func staticImgStatPng() (*asset, error) {
	path := "/dc/static/img/stat.png"
	name := "static/img/stat.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUsRuPng reads file data from disk. It returns an error on failure.
func staticImgUsRuPng() (*asset, error) {
	path := "/dc/static/img/us-ru.png"
	name := "static/img/us-ru.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSerpentJs reads file data from disk. It returns an error on failure.
func staticJsSerpentJs() (*asset, error) {
	path := "/dc/static/js/Serpent.js"
	name := "static/js/Serpent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAesJs reads file data from disk. It returns an error on failure.
func staticJsAesJs() (*asset, error) {
	path := "/dc/static/js/aes.js"
	name := "static/js/aes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAsn1hex11Js reads file data from disk. It returns an error on failure.
func staticJsAsn1hex11Js() (*asset, error) {
	path := "/dc/static/js/asn1hex-1.1.js"
	name := "static/js/asn1hex-1.1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAsn1hex11MinJs reads file data from disk. It returns an error on failure.
func staticJsAsn1hex11MinJs() (*asset, error) {
	path := "/dc/static/js/asn1hex-1.1.min.js"
	name := "static/js/asn1hex-1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAsn1hex1Js reads file data from disk. It returns an error on failure.
func staticJsAsn1hex1Js() (*asset, error) {
	path := "/dc/static/js/asn1hex-1.js"
	name := "static/js/asn1hex-1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBase64Js reads file data from disk. It returns an error on failure.
func staticJsBase64Js() (*asset, error) {
	path := "/dc/static/js/base64.js"
	name := "static/js/base64.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapAlertJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapAlertJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-alert.js"
	name := "static/js/bootstrap-alert.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapButtonJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapButtonJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-button.js"
	name := "static/js/bootstrap-button.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapCarouselJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapCarouselJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-carousel.js"
	name := "static/js/bootstrap-carousel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapCollapseJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapCollapseJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-collapse.js"
	name := "static/js/bootstrap-collapse.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapDropdownJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapDropdownJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-dropdown.js"
	name := "static/js/bootstrap-dropdown.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapModalJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapModalJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-modal.js"
	name := "static/js/bootstrap-modal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapPopoverJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapPopoverJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-popover.js"
	name := "static/js/bootstrap-popover.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapScrollspyJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapScrollspyJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-scrollspy.js"
	name := "static/js/bootstrap-scrollspy.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTabJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTabJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-tab.js"
	name := "static/js/bootstrap-tab.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTooltipJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTooltipJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-tooltip.js"
	name := "static/js/bootstrap-tooltip.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTransitionJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTransitionJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-transition.js"
	name := "static/js/bootstrap-transition.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapTypeaheadJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapTypeaheadJs() (*asset, error) {
	path := "/dc/static/js/bootstrap-typeahead.js"
	name := "static/js/bootstrap-typeahead.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapMinJs() (*asset, error) {
	path := "/dc/static/js/bootstrap.min.js"
	name := "static/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsChatJs reads file data from disk. It returns an error on failure.
func staticJsChatJs() (*asset, error) {
	path := "/dc/static/js/chat.js"
	name := "static/js/chat.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCropperJs reads file data from disk. It returns an error on failure.
func staticJsCropperJs() (*asset, error) {
	path := "/dc/static/js/cropper.js"
	name := "static/js/cropper.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoJsAesJs reads file data from disk. It returns an error on failure.
func staticJsCryptoJsAesJs() (*asset, error) {
	path := "/dc/static/js/crypto-js-aes.js"
	name := "static/js/crypto-js-aes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoJsModeEcbJs reads file data from disk. It returns an error on failure.
func staticJsCryptoJsModeEcbJs() (*asset, error) {
	path := "/dc/static/js/crypto-js-mode-ecb.js"
	name := "static/js/crypto-js-mode-ecb.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoJsPadIso10126Js reads file data from disk. It returns an error on failure.
func staticJsCryptoJsPadIso10126Js() (*asset, error) {
	path := "/dc/static/js/crypto-js-pad-iso10126.js"
	name := "static/js/crypto-js-pad-iso10126.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDatatablesBootstrapJs reads file data from disk. It returns an error on failure.
func staticJsDatatablesBootstrapJs() (*asset, error) {
	path := "/dc/static/js/dataTables.bootstrap.js"
	name := "static/js/dataTables.bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoFlotDemoJs reads file data from disk. It returns an error on failure.
func staticJsDemoFlotDemoJs() (*asset, error) {
	path := "/dc/static/js/demo/flot-demo.js"
	name := "static/js/demo/flot-demo.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsEncBase64MinJs reads file data from disk. It returns an error on failure.
func staticJsEncBase64MinJs() (*asset, error) {
	path := "/dc/static/js/enc-base64-min.js"
	name := "static/js/enc-base64-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsHex2aJs reads file data from disk. It returns an error on failure.
func staticJsHex2aJs() (*asset, error) {
	path := "/dc/static/js/hex2a.js"
	name := "static/js/hex2a.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsHtml5shivJs reads file data from disk. It returns an error on failure.
func staticJsHtml5shivJs() (*asset, error) {
	path := "/dc/static/js/html5shiv.js"
	name := "static/js/html5shiv.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsIndexJs reads file data from disk. It returns an error on failure.
func staticJsIndexJs() (*asset, error) {
	path := "/dc/static/js/index.js"
	name := "static/js/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsInfobubbleJs reads file data from disk. It returns an error on failure.
func staticJsInfobubbleJs() (*asset, error) {
	path := "/dc/static/js/infobubble.js"
	name := "static/js/infobubble.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquery1102Js reads file data from disk. It returns an error on failure.
func staticJsJquery1102Js() (*asset, error) {
	path := "/dc/static/js/jquery-1.10.2.js"
	name := "static/js/jquery-1.10.2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquery1110Js reads file data from disk. It returns an error on failure.
func staticJsJquery1110Js() (*asset, error) {
	path := "/dc/static/js/jquery-1.11.0.js"
	name := "static/js/jquery-1.11.0.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquery191MinJs reads file data from disk. It returns an error on failure.
func staticJsJquery191MinJs() (*asset, error) {
	path := "/dc/static/js/jquery-1.9.1.min.js"
	name := "static/js/jquery-1.9.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryUiSlideraccessJs reads file data from disk. It returns an error on failure.
func staticJsJqueryUiSlideraccessJs() (*asset, error) {
	path := "/dc/static/js/jquery-ui-sliderAccess.js"
	name := "static/js/jquery-ui-sliderAccess.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryUiTimepickerAddonJs reads file data from disk. It returns an error on failure.
func staticJsJqueryUiTimepickerAddonJs() (*asset, error) {
	path := "/dc/static/js/jquery-ui-timepicker-addon.js"
	name := "static/js/jquery-ui-timepicker-addon.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryUiMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryUiMinJs() (*asset, error) {
	path := "/dc/static/js/jquery-ui.min.js"
	name := "static/js/jquery-ui.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryJcropJs reads file data from disk. It returns an error on failure.
func staticJsJqueryJcropJs() (*asset, error) {
	path := "/dc/static/js/jquery.Jcrop.js"
	name := "static/js/jquery.Jcrop.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryDatatablesJs reads file data from disk. It returns an error on failure.
func staticJsJqueryDatatablesJs() (*asset, error) {
	path := "/dc/static/js/jquery.dataTables.js"
	name := "static/js/jquery.dataTables.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryFlotJs reads file data from disk. It returns an error on failure.
func staticJsJqueryFlotJs() (*asset, error) {
	path := "/dc/static/js/jquery.flot.js"
	name := "static/js/jquery.flot.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryJs reads file data from disk. It returns an error on failure.
func staticJsJqueryJs() (*asset, error) {
	path := "/dc/static/js/jquery.js"
	name := "static/js/jquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryMetismenuJs reads file data from disk. It returns an error on failure.
func staticJsJqueryMetismenuJs() (*asset, error) {
	path := "/dc/static/js/jquery.metisMenu.js"
	name := "static/js/jquery.metisMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryMinJs() (*asset, error) {
	path := "/dc/static/js/jquery.min.js"
	name := "static/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryQtipMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryQtipMinJs() (*asset, error) {
	path := "/dc/static/js/jquery.qtip.min.js"
	name := "static/js/jquery.qtip.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryTooltipsterMinJs reads file data from disk. It returns an error on failure.
func staticJsJqueryTooltipsterMinJs() (*asset, error) {
	path := "/dc/static/js/jquery.tooltipster.min.js"
	name := "static/js/jquery.tooltipster.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryWebcamAs3Js reads file data from disk. It returns an error on failure.
func staticJsJqueryWebcamAs3Js() (*asset, error) {
	path := "/dc/static/js/jquery.webcam.as3.js"
	name := "static/js/jquery.webcam.as3.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJquery_002Js reads file data from disk. It returns an error on failure.
func staticJsJquery_002Js() (*asset, error) {
	path := "/dc/static/js/jquery_002.js"
	name := "static/js/jquery_002.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJsJs reads file data from disk. It returns an error on failure.
func staticJsJsJs() (*asset, error) {
	path := "/dc/static/js/js.js"
	name := "static/js/js.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJsbnJs reads file data from disk. It returns an error on failure.
func staticJsJsbnJs() (*asset, error) {
	path := "/dc/static/js/jsbn.js"
	name := "static/js/jsbn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJsbn2Js reads file data from disk. It returns an error on failure.
func staticJsJsbn2Js() (*asset, error) {
	path := "/dc/static/js/jsbn2.js"
	name := "static/js/jsbn2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMarkerclustererJs reads file data from disk. It returns an error on failure.
func staticJsMarkerclustererJs() (*asset, error) {
	path := "/dc/static/js/markerclusterer.js"
	name := "static/js/markerclusterer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMcryptJs reads file data from disk. It returns an error on failure.
func staticJsMcryptJs() (*asset, error) {
	path := "/dc/static/js/mcrypt.js"
	name := "static/js/mcrypt.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMd5Js reads file data from disk. It returns an error on failure.
func staticJsMd5Js() (*asset, error) {
	path := "/dc/static/js/md5.js"
	name := "static/js/md5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsFlotExcanvasMinJs reads file data from disk. It returns an error on failure.
func staticJsPluginsFlotExcanvasMinJs() (*asset, error) {
	path := "/dc/static/js/plugins/flot/excanvas.min.js"
	name := "static/js/plugins/flot/excanvas.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsFlotJqueryFlotJs reads file data from disk. It returns an error on failure.
func staticJsPluginsFlotJqueryFlotJs() (*asset, error) {
	path := "/dc/static/js/plugins/flot/jquery.flot.js"
	name := "static/js/plugins/flot/jquery.flot.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsFlotJqueryFlotPieJs reads file data from disk. It returns an error on failure.
func staticJsPluginsFlotJqueryFlotPieJs() (*asset, error) {
	path := "/dc/static/js/plugins/flot/jquery.flot.pie.js"
	name := "static/js/plugins/flot/jquery.flot.pie.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsFlotJqueryFlotResizeJs reads file data from disk. It returns an error on failure.
func staticJsPluginsFlotJqueryFlotResizeJs() (*asset, error) {
	path := "/dc/static/js/plugins/flot/jquery.flot.resize.js"
	name := "static/js/plugins/flot/jquery.flot.resize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsFlotJqueryFlotTooltipMinJs reads file data from disk. It returns an error on failure.
func staticJsPluginsFlotJqueryFlotTooltipMinJs() (*asset, error) {
	path := "/dc/static/js/plugins/flot/jquery.flot.tooltip.min.js"
	name := "static/js/plugins/flot/jquery.flot.tooltip.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsMetismenuMetismenuMinJs reads file data from disk. It returns an error on failure.
func staticJsPluginsMetismenuMetismenuMinJs() (*asset, error) {
	path := "/dc/static/js/plugins/metisMenu/metisMenu.min.js"
	name := "static/js/plugins/metisMenu/metisMenu.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsModalBootstrapModalJs reads file data from disk. It returns an error on failure.
func staticJsPluginsModalBootstrapModalJs() (*asset, error) {
	path := "/dc/static/js/plugins/modal/bootstrap-modal.js"
	name := "static/js/plugins/modal/bootstrap-modal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPluginsModalBootstrapModalmanagerJs reads file data from disk. It returns an error on failure.
func staticJsPluginsModalBootstrapModalmanagerJs() (*asset, error) {
	path := "/dc/static/js/plugins/modal/bootstrap-modalmanager.js"
	name := "static/js/plugins/modal/bootstrap-modalmanager.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPrng4Js reads file data from disk. It returns an error on failure.
func staticJsPrng4Js() (*asset, error) {
	path := "/dc/static/js/prng4.js"
	name := "static/js/prng4.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRespondMinJs reads file data from disk. It returns an error on failure.
func staticJsRespondMinJs() (*asset, error) {
	path := "/dc/static/js/respond.min.js"
	name := "static/js/respond.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRijndaelJs reads file data from disk. It returns an error on failure.
func staticJsRijndaelJs() (*asset, error) {
	path := "/dc/static/js/rijndael.js"
	name := "static/js/rijndael.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRipemd160Js reads file data from disk. It returns an error on failure.
func staticJsRipemd160Js() (*asset, error) {
	path := "/dc/static/js/ripemd160.js"
	name := "static/js/ripemd160.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRngJs reads file data from disk. It returns an error on failure.
func staticJsRngJs() (*asset, error) {
	path := "/dc/static/js/rng.js"
	name := "static/js/rng.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsaJs reads file data from disk. It returns an error on failure.
func staticJsRsaJs() (*asset, error) {
	path := "/dc/static/js/rsa.js"
	name := "static/js/rsa.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsa2Js reads file data from disk. It returns an error on failure.
func staticJsRsa2Js() (*asset, error) {
	path := "/dc/static/js/rsa2.js"
	name := "static/js/rsa2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsapem11Js reads file data from disk. It returns an error on failure.
func staticJsRsapem11Js() (*asset, error) {
	path := "/dc/static/js/rsapem-1.1.js"
	name := "static/js/rsapem-1.1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsapem11MinJs reads file data from disk. It returns an error on failure.
func staticJsRsapem11MinJs() (*asset, error) {
	path := "/dc/static/js/rsapem-1.1.min.js"
	name := "static/js/rsapem-1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsapem1Js reads file data from disk. It returns an error on failure.
func staticJsRsapem1Js() (*asset, error) {
	path := "/dc/static/js/rsapem-1.js"
	name := "static/js/rsapem-1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsasign12Js reads file data from disk. It returns an error on failure.
func staticJsRsasign12Js() (*asset, error) {
	path := "/dc/static/js/rsasign-1.2.js"
	name := "static/js/rsasign-1.2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsasign12MinJs reads file data from disk. It returns an error on failure.
func staticJsRsasign12MinJs() (*asset, error) {
	path := "/dc/static/js/rsasign-1.2.min.js"
	name := "static/js/rsasign-1.2.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsasign1Js reads file data from disk. It returns an error on failure.
func staticJsRsasign1Js() (*asset, error) {
	path := "/dc/static/js/rsasign-1.js"
	name := "static/js/rsasign-1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSas3camJs reads file data from disk. It returns an error on failure.
func staticJsSas3camJs() (*asset, error) {
	path := "/dc/static/js/sAS3Cam.js"
	name := "static/js/sAS3Cam.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSbAdmin2Js reads file data from disk. It returns an error on failure.
func staticJsSbAdmin2Js() (*asset, error) {
	path := "/dc/static/js/sb-admin-2.js"
	name := "static/js/sb-admin-2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSbAdminJs reads file data from disk. It returns an error on failure.
func staticJsSbAdminJs() (*asset, error) {
	path := "/dc/static/js/sb-admin.js"
	name := "static/js/sb-admin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSha1Js reads file data from disk. It returns an error on failure.
func staticJsSha1Js() (*asset, error) {
	path := "/dc/static/js/sha1.js"
	name := "static/js/sha1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSha256Js reads file data from disk. It returns an error on failure.
func staticJsSha256Js() (*asset, error) {
	path := "/dc/static/js/sha256.js"
	name := "static/js/sha256.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSha512Js reads file data from disk. It returns an error on failure.
func staticJsSha512Js() (*asset, error) {
	path := "/dc/static/js/sha512.js"
	name := "static/js/sha512.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSpinJs reads file data from disk. It returns an error on failure.
func staticJsSpinJs() (*asset, error) {
	path := "/dc/static/js/spin.js"
	name := "static/js/spin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSpotsJs reads file data from disk. It returns an error on failure.
func staticJsSpotsJs() (*asset, error) {
	path := "/dc/static/js/spots.js"
	name := "static/js/spots.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsStacktableJs reads file data from disk. It returns an error on failure.
func staticJsStacktableJs() (*asset, error) {
	path := "/dc/static/js/stacktable.js"
	name := "static/js/stacktable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsUnixtimeJs reads file data from disk. It returns an error on failure.
func staticJsUnixtimeJs() (*asset, error) {
	path := "/dc/static/js/unixtime.js"
	name := "static/js/unixtime.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsUploaderJs reads file data from disk. It returns an error on failure.
func staticJsUploaderJs() (*asset, error) {
	path := "/dc/static/js/uploader.js"
	name := "static/js/uploader.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsWorkerJs reads file data from disk. It returns an error on failure.
func staticJsWorkerJs() (*asset, error) {
	path := "/dc/static/js/worker.js"
	name := "static/js/worker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsX50911Js reads file data from disk. It returns an error on failure.
func staticJsX50911Js() (*asset, error) {
	path := "/dc/static/js/x509-1.1.js"
	name := "static/js/x509-1.1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsX50911MinJs reads file data from disk. It returns an error on failure.
func staticJsX50911MinJs() (*asset, error) {
	path := "/dc/static/js/x509-1.1.min.js"
	name := "static/js/x509-1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsYoutube_webcamJs reads file data from disk. It returns an error on failure.
func staticJsYoutube_webcamJs() (*asset, error) {
	path := "/dc/static/js/youtube_webcam.js"
	name := "static/js/youtube_webcam.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLang1Ini reads file data from disk. It returns an error on failure.
func staticLang1Ini() (*asset, error) {
	path := "/dc/static/lang/1.ini"
	name := "static/lang/1.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLang42Ini reads file data from disk. It returns an error on failure.
func staticLang42Ini() (*asset, error) {
	path := "/dc/static/lang/42.ini"
	name := "static/lang/42.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLangEnUsAllJson reads file data from disk. It returns an error on failure.
func staticLangEnUsAllJson() (*asset, error) {
	path := "/dc/static/lang/en-us.all.json"
	name := "static/lang/en-us.all.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLangLocale_enUsIni reads file data from disk. It returns an error on failure.
func staticLangLocale_enUsIni() (*asset, error) {
	path := "/dc/static/lang/locale_en-US.ini"
	name := "static/lang/locale_en-US.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLangLocale_ruRuIni reads file data from disk. It returns an error on failure.
func staticLangLocale_ruRuIni() (*asset, error) {
	path := "/dc/static/lang/locale_ru-RU.ini"
	name := "static/lang/locale_ru-RU.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticNodesInc reads file data from disk. It returns an error on failure.
func staticNodesInc() (*asset, error) {
	path := "/dc/static/nodes.inc"
	name := "static/nodes.inc"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticSwfSas3camSwf reads file data from disk. It returns an error on failure.
func staticSwfSas3camSwf() (*asset, error) {
	path := "/dc/static/swf/sAS3Cam.swf"
	name := "static/swf/sAS3Cam.swf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDirectory reads file data from disk. It returns an error on failure.
func staticTemplatesDirectory() (*asset, error) {
	path := "/dc/static/templates/.directory"
	name := "static/templates/.directory"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAbuseHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAbuseHtml() (*asset, error) {
	path := "/dc/static/templates/abuse.html"
	name := "static/templates/abuse.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAdd_cf_project_dataHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAdd_cf_project_dataHtml() (*asset, error) {
	path := "/dc/static/templates/add_cf_project_data.html"
	name := "static/templates/add_cf_project_data.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAdmin_variablesHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAdmin_variablesHtml() (*asset, error) {
	path := "/dc/static/templates/admin_variables.html"
	name := "static/templates/admin_variables.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAlert_successHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAlert_successHtml() (*asset, error) {
	path := "/dc/static/templates/alert_success.html"
	name := "static/templates/alert_success.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesArbitrationHtml reads file data from disk. It returns an error on failure.
func staticTemplatesArbitrationHtml() (*asset, error) {
	path := "/dc/static/templates/arbitration.html"
	name := "static/templates/arbitration.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesArbitration_arbitratorHtml reads file data from disk. It returns an error on failure.
func staticTemplatesArbitration_arbitratorHtml() (*asset, error) {
	path := "/dc/static/templates/arbitration_arbitrator.html"
	name := "static/templates/arbitration_arbitrator.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesArbitration_buyerHtml reads file data from disk. It returns an error on failure.
func staticTemplatesArbitration_buyerHtml() (*asset, error) {
	path := "/dc/static/templates/arbitration_buyer.html"
	name := "static/templates/arbitration_buyer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesArbitration_sellerHtml reads file data from disk. It returns an error on failure.
func staticTemplatesArbitration_sellerHtml() (*asset, error) {
	path := "/dc/static/templates/arbitration_seller.html"
	name := "static/templates/arbitration_seller.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAssignmentsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAssignmentsHtml() (*asset, error) {
	path := "/dc/static/templates/assignments.html"
	name := "static/templates/assignments.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAssignments_new_minerHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAssignments_new_minerHtml() (*asset, error) {
	path := "/dc/static/templates/assignments_new_miner.html"
	name := "static/templates/assignments_new_miner.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAssignments_promised_amountHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAssignments_promised_amountHtml() (*asset, error) {
	path := "/dc/static/templates/assignments_promised_amount.html"
	name := "static/templates/assignments_promised_amount.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAuto_paymentsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAuto_paymentsHtml() (*asset, error) {
	path := "/dc/static/templates/auto_payments.html"
	name := "static/templates/auto_payments.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesAvailable_keysHtml reads file data from disk. It returns an error on failure.
func staticTemplatesAvailable_keysHtml() (*asset, error) {
	path := "/dc/static/templates/available_keys.html"
	name := "static/templates/available_keys.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesBlock_explorerHtml reads file data from disk. It returns an error on failure.
func staticTemplatesBlock_explorerHtml() (*asset, error) {
	path := "/dc/static/templates/block_explorer.html"
	name := "static/templates/block_explorer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesBug_reportingHtml reads file data from disk. It returns an error on failure.
func staticTemplatesBug_reportingHtml() (*asset, error) {
	path := "/dc/static/templates/bug_reporting.html"
	name := "static/templates/bug_reporting.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCash_request_inHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCash_request_inHtml() (*asset, error) {
	path := "/dc/static/templates/cash_request_in.html"
	name := "static/templates/cash_request_in.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCash_request_outHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCash_request_outHtml() (*asset, error) {
	path := "/dc/static/templates/cash_request_out.html"
	name := "static/templates/cash_request_out.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCf_catalogHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCf_catalogHtml() (*asset, error) {
	path := "/dc/static/templates/cf_catalog.html"
	name := "static/templates/cf_catalog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCf_page_previewHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCf_page_previewHtml() (*asset, error) {
	path := "/dc/static/templates/cf_page_preview.html"
	name := "static/templates/cf_page_preview.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCf_project_change_categoryHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCf_project_change_categoryHtml() (*asset, error) {
	path := "/dc/static/templates/cf_project_change_category.html"
	name := "static/templates/cf_project_change_category.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCf_startHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCf_startHtml() (*asset, error) {
	path := "/dc/static/templates/cf_start.html"
	name := "static/templates/cf_start.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_arbitrator_conditionsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_arbitrator_conditionsHtml() (*asset, error) {
	path := "/dc/static/templates/change_arbitrator_conditions.html"
	name := "static/templates/change_arbitrator_conditions.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_avatarHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_avatarHtml() (*asset, error) {
	path := "/dc/static/templates/change_avatar.html"
	name := "static/templates/change_avatar.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_commissionHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_commissionHtml() (*asset, error) {
	path := "/dc/static/templates/change_commission.html"
	name := "static/templates/change_commission.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_country_raceHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_country_raceHtml() (*asset, error) {
	path := "/dc/static/templates/change_country_race.html"
	name := "static/templates/change_country_race.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_creditorHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_creditorHtml() (*asset, error) {
	path := "/dc/static/templates/change_creditor.html"
	name := "static/templates/change_creditor.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_geolocationHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_geolocationHtml() (*asset, error) {
	path := "/dc/static/templates/change_geolocation.html"
	name := "static/templates/change_geolocation.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_hostHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_hostHtml() (*asset, error) {
	path := "/dc/static/templates/change_host.html"
	name := "static/templates/change_host.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_key_closeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_key_closeHtml() (*asset, error) {
	path := "/dc/static/templates/change_key_close.html"
	name := "static/templates/change_key_close.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_key_requestHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_key_requestHtml() (*asset, error) {
	path := "/dc/static/templates/change_key_request.html"
	name := "static/templates/change_key_request.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_money_back_timeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_money_back_timeHtml() (*asset, error) {
	path := "/dc/static/templates/change_money_back_time.html"
	name := "static/templates/change_money_back_time.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_node_keyHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_node_keyHtml() (*asset, error) {
	path := "/dc/static/templates/change_node_key.html"
	name := "static/templates/change_node_key.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_poolHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_poolHtml() (*asset, error) {
	path := "/dc/static/templates/change_pool.html"
	name := "static/templates/change_pool.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_primary_keyHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_primary_keyHtml() (*asset, error) {
	path := "/dc/static/templates/change_primary_key.html"
	name := "static/templates/change_primary_key.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChange_promised_amountHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChange_promised_amountHtml() (*asset, error) {
	path := "/dc/static/templates/change_promised_amount.html"
	name := "static/templates/change_promised_amount.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesChatHtml reads file data from disk. It returns an error on failure.
func staticTemplatesChatHtml() (*asset, error) {
	path := "/dc/static/templates/chat.html"
	name := "static/templates/chat.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCreditsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCreditsHtml() (*asset, error) {
	path := "/dc/static/templates/credits.html"
	name := "static/templates/credits.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCurrency_exchangeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCurrency_exchangeHtml() (*asset, error) {
	path := "/dc/static/templates/currency_exchange.html"
	name := "static/templates/currency_exchange.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesCurrency_exchange_deleteHtml reads file data from disk. It returns an error on failure.
func staticTemplatesCurrency_exchange_deleteHtml() (*asset, error) {
	path := "/dc/static/templates/currency_exchange_delete.html"
	name := "static/templates/currency_exchange_delete.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDb_infoHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDb_infoHtml() (*asset, error) {
	path := "/dc/static/templates/db_info.html"
	name := "static/templates/db_info.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDb_info_nodesHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDb_info_nodesHtml() (*asset, error) {
	path := "/dc/static/templates/db_info_nodes.html"
	name := "static/templates/db_info_nodes.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDel_cf_fundingHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDel_cf_fundingHtml() (*asset, error) {
	path := "/dc/static/templates/del_cf_funding.html"
	name := "static/templates/del_cf_funding.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDel_cf_projectHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDel_cf_projectHtml() (*asset, error) {
	path := "/dc/static/templates/del_cf_project.html"
	name := "static/templates/del_cf_project.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDel_creditHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDel_creditHtml() (*asset, error) {
	path := "/dc/static/templates/del_credit.html"
	name := "static/templates/del_credit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDel_pool_userHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDel_pool_userHtml() (*asset, error) {
	path := "/dc/static/templates/del_pool_user.html"
	name := "static/templates/del_pool_user.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesDel_promised_amountHtml reads file data from disk. It returns an error on failure.
func staticTemplatesDel_promised_amountHtml() (*asset, error) {
	path := "/dc/static/templates/del_promised_amount.html"
	name := "static/templates/del_promised_amount.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesE_mainHtml reads file data from disk. It returns an error on failure.
func staticTemplatesE_mainHtml() (*asset, error) {
	path := "/dc/static/templates/e_main.html"
	name := "static/templates/e_main.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesE_my_financeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesE_my_financeHtml() (*asset, error) {
	path := "/dc/static/templates/e_my_finance.html"
	name := "static/templates/e_my_finance.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesE_my_historyHtml reads file data from disk. It returns an error on failure.
func staticTemplatesE_my_historyHtml() (*asset, error) {
	path := "/dc/static/templates/e_my_history.html"
	name := "static/templates/e_my_history.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesE_my_ordersHtml reads file data from disk. It returns an error on failure.
func staticTemplatesE_my_ordersHtml() (*asset, error) {
	path := "/dc/static/templates/e_my_orders.html"
	name := "static/templates/e_my_orders.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesE_pagesHtml reads file data from disk. It returns an error on failure.
func staticTemplatesE_pagesHtml() (*asset, error) {
	path := "/dc/static/templates/e_pages.html"
	name := "static/templates/e_pages.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesE_redirectHtml reads file data from disk. It returns an error on failure.
func staticTemplatesE_redirectHtml() (*asset, error) {
	path := "/dc/static/templates/e_redirect.html"
	name := "static/templates/e_redirect.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesExchange_adminHtml reads file data from disk. It returns an error on failure.
func staticTemplatesExchange_adminHtml() (*asset, error) {
	path := "/dc/static/templates/exchange_admin.html"
	name := "static/templates/exchange_admin.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesFirst_selectHtml reads file data from disk. It returns an error on failure.
func staticTemplatesFirst_selectHtml() (*asset, error) {
	path := "/dc/static/templates/first_select.html"
	name := "static/templates/first_select.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesFor_repaid_fixHtml reads file data from disk. It returns an error on failure.
func staticTemplatesFor_repaid_fixHtml() (*asset, error) {
	path := "/dc/static/templates/for_repaid_fix.html"
	name := "static/templates/for_repaid_fix.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesHolidays_listHtml reads file data from disk. It returns an error on failure.
func staticTemplatesHolidays_listHtml() (*asset, error) {
	path := "/dc/static/templates/holidays_list.html"
	name := "static/templates/holidays_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesHomeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesHomeHtml() (*asset, error) {
	path := "/dc/static/templates/home.html"
	name := "static/templates/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesHome0Html reads file data from disk. It returns an error on failure.
func staticTemplatesHome0Html() (*asset, error) {
	path := "/dc/static/templates/home0.html"
	name := "static/templates/home0.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesIndexHtml reads file data from disk. It returns an error on failure.
func staticTemplatesIndexHtml() (*asset, error) {
	path := "/dc/static/templates/index.html"
	name := "static/templates/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesIndex_cfHtml reads file data from disk. It returns an error on failure.
func staticTemplatesIndex_cfHtml() (*asset, error) {
	path := "/dc/static/templates/index_cf.html"
	name := "static/templates/index_cf.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesIndex_eHtml reads file data from disk. It returns an error on failure.
func staticTemplatesIndex_eHtml() (*asset, error) {
	path := "/dc/static/templates/index_e.html"
	name := "static/templates/index_e.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesInformationHtml reads file data from disk. It returns an error on failure.
func staticTemplatesInformationHtml() (*asset, error) {
	path := "/dc/static/templates/information.html"
	name := "static/templates/information.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesInstall_step_0Html reads file data from disk. It returns an error on failure.
func staticTemplatesInstall_step_0Html() (*asset, error) {
	path := "/dc/static/templates/install_step_0.html"
	name := "static/templates/install_step_0.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesInstall_step_1Html reads file data from disk. It returns an error on failure.
func staticTemplatesInstall_step_1Html() (*asset, error) {
	path := "/dc/static/templates/install_step_1.html"
	name := "static/templates/install_step_1.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesInterfaceHtml reads file data from disk. It returns an error on failure.
func staticTemplatesInterfaceHtml() (*asset, error) {
	path := "/dc/static/templates/interface.html"
	name := "static/templates/interface.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesLoginHtml reads file data from disk. It returns an error on failure.
func staticTemplatesLoginHtml() (*asset, error) {
	path := "/dc/static/templates/login.html"
	name := "static/templates/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesMenuHtml reads file data from disk. It returns an error on failure.
func staticTemplatesMenuHtml() (*asset, error) {
	path := "/dc/static/templates/menu.html"
	name := "static/templates/menu.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesMining_menuHtml reads file data from disk. It returns an error on failure.
func staticTemplatesMining_menuHtml() (*asset, error) {
	path := "/dc/static/templates/mining_menu.html"
	name := "static/templates/mining_menu.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesMining_promised_amountHtml reads file data from disk. It returns an error on failure.
func staticTemplatesMining_promised_amountHtml() (*asset, error) {
	path := "/dc/static/templates/mining_promised_amount.html"
	name := "static/templates/mining_promised_amount.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesModalHtml reads file data from disk. It returns an error on failure.
func staticTemplatesModalHtml() (*asset, error) {
	path := "/dc/static/templates/modal.html"
	name := "static/templates/modal.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesMoney_backHtml reads file data from disk. It returns an error on failure.
func staticTemplatesMoney_backHtml() (*asset, error) {
	path := "/dc/static/templates/money_back.html"
	name := "static/templates/money_back.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesMoney_back_requestHtml reads file data from disk. It returns an error on failure.
func staticTemplatesMoney_back_requestHtml() (*asset, error) {
	path := "/dc/static/templates/money_back_request.html"
	name := "static/templates/money_back_request.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesMy_cf_projectsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesMy_cf_projectsHtml() (*asset, error) {
	path := "/dc/static/templates/my_cf_projects.html"
	name := "static/templates/my_cf_projects.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNew_auto_paymentHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNew_auto_paymentHtml() (*asset, error) {
	path := "/dc/static/templates/new_auto_payment.html"
	name := "static/templates/new_auto_payment.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNew_cf_projectHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNew_cf_projectHtml() (*asset, error) {
	path := "/dc/static/templates/new_cf_project.html"
	name := "static/templates/new_cf_project.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNew_creditHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNew_creditHtml() (*asset, error) {
	path := "/dc/static/templates/new_credit.html"
	name := "static/templates/new_credit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNew_holidaysHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNew_holidaysHtml() (*asset, error) {
	path := "/dc/static/templates/new_holidays.html"
	name := "static/templates/new_holidays.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNew_promised_amountHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNew_promised_amountHtml() (*asset, error) {
	path := "/dc/static/templates/new_promised_amount.html"
	name := "static/templates/new_promised_amount.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNew_userHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNew_userHtml() (*asset, error) {
	path := "/dc/static/templates/new_user.html"
	name := "static/templates/new_user.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNode_configHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNode_configHtml() (*asset, error) {
	path := "/dc/static/templates/node_config.html"
	name := "static/templates/node_config.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesNotificationsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesNotificationsHtml() (*asset, error) {
	path := "/dc/static/templates/notifications.html"
	name := "static/templates/notifications.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesPointsHtml reads file data from disk. It returns an error on failure.
func staticTemplatesPointsHtml() (*asset, error) {
	path := "/dc/static/templates/points.html"
	name := "static/templates/points.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesPool_adminHtml reads file data from disk. It returns an error on failure.
func staticTemplatesPool_adminHtml() (*asset, error) {
	path := "/dc/static/templates/pool_admin.html"
	name := "static/templates/pool_admin.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesPool_admin_loginHtml reads file data from disk. It returns an error on failure.
func staticTemplatesPool_admin_loginHtml() (*asset, error) {
	path := "/dc/static/templates/pool_admin_login.html"
	name := "static/templates/pool_admin_login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesProgressHtml reads file data from disk. It returns an error on failure.
func staticTemplatesProgressHtml() (*asset, error) {
	path := "/dc/static/templates/progress.html"
	name := "static/templates/progress.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesProgress_barHtml reads file data from disk. It returns an error on failure.
func staticTemplatesProgress_barHtml() (*asset, error) {
	path := "/dc/static/templates/progress_bar.html"
	name := "static/templates/progress_bar.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesPromised_amount_actualizationHtml reads file data from disk. It returns an error on failure.
func staticTemplatesPromised_amount_actualizationHtml() (*asset, error) {
	path := "/dc/static/templates/promised_amount_actualization.html"
	name := "static/templates/promised_amount_actualization.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesPromised_amount_listHtml reads file data from disk. It returns an error on failure.
func staticTemplatesPromised_amount_listHtml() (*asset, error) {
	path := "/dc/static/templates/promised_amount_list.html"
	name := "static/templates/promised_amount_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesRepayment_creditHtml reads file data from disk. It returns an error on failure.
func staticTemplatesRepayment_creditHtml() (*asset, error) {
	path := "/dc/static/templates/repayment_credit.html"
	name := "static/templates/repayment_credit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesRestoring_accessHtml reads file data from disk. It returns an error on failure.
func staticTemplatesRestoring_accessHtml() (*asset, error) {
	path := "/dc/static/templates/restoring_access.html"
	name := "static/templates/restoring_access.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesRewrite_primary_keyHtml reads file data from disk. It returns an error on failure.
func staticTemplatesRewrite_primary_keyHtml() (*asset, error) {
	path := "/dc/static/templates/rewrite_primary_key.html"
	name := "static/templates/rewrite_primary_key.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesSet_passwordHtml reads file data from disk. It returns an error on failure.
func staticTemplatesSet_passwordHtml() (*asset, error) {
	path := "/dc/static/templates/set_password.html"
	name := "static/templates/set_password.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesSetup_passwordHtml reads file data from disk. It returns an error on failure.
func staticTemplatesSetup_passwordHtml() (*asset, error) {
	path := "/dc/static/templates/setup_password.html"
	name := "static/templates/setup_password.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesSign_up_in_the_poolHtml reads file data from disk. It returns an error on failure.
func staticTemplatesSign_up_in_the_poolHtml() (*asset, error) {
	path := "/dc/static/templates/sign_up_in_the_pool.html"
	name := "static/templates/sign_up_in_the_pool.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesSignaturesHtml reads file data from disk. It returns an error on failure.
func staticTemplatesSignaturesHtml() (*asset, error) {
	path := "/dc/static/templates/signatures.html"
	name := "static/templates/signatures.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesStatisticHtml reads file data from disk. It returns an error on failure.
func staticTemplatesStatisticHtml() (*asset, error) {
	path := "/dc/static/templates/statistic.html"
	name := "static/templates/statistic.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesStatistic_votingHtml reads file data from disk. It returns an error on failure.
func staticTemplatesStatistic_votingHtml() (*asset, error) {
	path := "/dc/static/templates/statistic_voting.html"
	name := "static/templates/statistic_voting.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpdating_blockchainHtml reads file data from disk. It returns an error on failure.
func staticTemplatesUpdating_blockchainHtml() (*asset, error) {
	path := "/dc/static/templates/updating_blockchain.html"
	name := "static/templates/updating_blockchain.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgradeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesUpgradeHtml() (*asset, error) {
	path := "/dc/static/templates/upgrade.html"
	name := "static/templates/upgrade.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_0Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_0Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_0.html"
	name := "static/templates/upgrade_0.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_1_and_2Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_1_and_2Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_1_and_2.html"
	name := "static/templates/upgrade_1_and_2.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_3Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_3Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_3.html"
	name := "static/templates/upgrade_3.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_4Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_4Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_4.html"
	name := "static/templates/upgrade_4.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_5Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_5Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_5.html"
	name := "static/templates/upgrade_5.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_6Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_6Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_6.html"
	name := "static/templates/upgrade_6.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_7Html reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_7Html() (*asset, error) {
	path := "/dc/static/templates/upgrade_7.html"
	name := "static/templates/upgrade_7.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesUpgrade_resendHtml reads file data from disk. It returns an error on failure.
func staticTemplatesUpgrade_resendHtml() (*asset, error) {
	path := "/dc/static/templates/upgrade_resend.html"
	name := "static/templates/upgrade_resend.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesVote_for_meHtml reads file data from disk. It returns an error on failure.
func staticTemplatesVote_for_meHtml() (*asset, error) {
	path := "/dc/static/templates/vote_for_me.html"
	name := "static/templates/vote_for_me.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesVotes_exchangeHtml reads file data from disk. It returns an error on failure.
func staticTemplatesVotes_exchangeHtml() (*asset, error) {
	path := "/dc/static/templates/votes_exchange.html"
	name := "static/templates/votes_exchange.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesVotingHtml reads file data from disk. It returns an error on failure.
func staticTemplatesVotingHtml() (*asset, error) {
	path := "/dc/static/templates/voting.html"
	name := "static/templates/voting.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesWaiting_accept_new_keyHtml reads file data from disk. It returns an error on failure.
func staticTemplatesWaiting_accept_new_keyHtml() (*asset, error) {
	path := "/dc/static/templates/waiting_accept_new_key.html"
	name := "static/templates/waiting_accept_new_key.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesWallets_listHtml reads file data from disk. It returns an error on failure.
func staticTemplatesWallets_listHtml() (*asset, error) {
	path := "/dc/static/templates/wallets_list.html"
	name := "static/templates/wallets_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/1block.bin": static1blockBin,
	"static/css/AS3Cam.css": staticCssAs3camCss,
	"static/css/Jcrop.gif": staticCssJcropGif,
	"static/css/bootstrap-modal.css": staticCssBootstrapModalCss,
	"static/css/bootstrap-responsive.css": staticCssBootstrapResponsiveCss,
	"static/css/bootstrap.css": staticCssBootstrapCss,
	"static/css/bootstrap.min.css": staticCssBootstrapMinCss,
	"static/css/cf.css": staticCssCfCss,
	"static/css/cropper.css": staticCssCropperCss,
	"static/css/dataTables.bootstrap.css": staticCssDatatablesBootstrapCss,
	"static/css/font-awesome.css": staticCssFontAwesomeCss,
	"static/css/jquery-ui-timepicker-addon.css": staticCssJqueryUiTimepickerAddonCss,
	"static/css/jquery-ui.css": staticCssJqueryUiCss,
	"static/css/jquery.Jcrop.css": staticCssJqueryJcropCss,
	"static/css/jquery.Jcrop.min.css": staticCssJqueryJcropMinCss,
	"static/css/jquery.css": staticCssJqueryCss,
	"static/css/jquery.qtip.min.css": staticCssJqueryQtipMinCss,
	"static/css/plugins/metisMenu/metisMenu.min.css": staticCssPluginsMetismenuMetismenuMinCss,
	"static/css/progress.css": staticCssProgressCss,
	"static/css/sb-admin-2.css": staticCssSbAdmin2Css,
	"static/css/sb-admin.css": staticCssSbAdminCss,
	"static/css/social-buttons.css": staticCssSocialButtonsCss,
	"static/css/tooltipster-shadow.css": staticCssTooltipsterShadowCss,
	"static/css/tooltipster.css": staticCssTooltipsterCss,
	"static/css/upgrade.css": staticCssUpgradeCss,
	"static/fonts/FontAwesome.otf": staticFontsFontawesomeOtf,
	"static/fonts/OpenSans-Regular.ttf": staticFontsOpensansRegularTtf,
	"static/fonts/fontawesome-webfont.eot": staticFontsFontawesomeWebfontEot,
	"static/fonts/fontawesome-webfont.svg": staticFontsFontawesomeWebfontSvg,
	"static/fonts/fontawesome-webfont.ttf": staticFontsFontawesomeWebfontTtf,
	"static/fonts/fontawesome-webfont.woff": staticFontsFontawesomeWebfontWoff,
	"static/fonts/luxisr.ttf": staticFontsLuxisrTtf,
	"static/img/.directory": staticImgDirectory,
	"static/img/alert.png": staticImgAlertPng,
	"static/img/anonim.png": staticImgAnonimPng,
	"static/img/blank.png": staticImgBlankPng,
	"static/img/cf_blurb_img.png": staticImgCf_blurb_imgPng,
	"static/img/face.jpg": staticImgFaceJpg,
	"static/img/glyphicons-halflings.png": staticImgGlyphiconsHalflingsPng,
	"static/img/k_bg.png": staticImgK_bgPng,
	"static/img/k_bg.psd": staticImgK_bgPsd,
	"static/img/k_bg_pass.png": staticImgK_bg_passPng,
	"static/img/k_db_pass.psd": staticImgK_db_passPsd,
	"static/img/load.gif": staticImgLoadGif,
	"static/img/logo-2.png": staticImgLogo2Png,
	"static/img/logo-small.png": staticImgLogoSmallPng,
	"static/img/logo.png": staticImgLogoPng,
	"static/img/main_loader.gif": staticImgMain_loaderGif,
	"static/img/noavatar.png": staticImgNoavatarPng,
	"static/img/pers.jpg": staticImgPersJpg,
	"static/img/photo.png": staticImgPhotoPng,
	"static/img/profile.jpg": staticImgProfileJpg,
	"static/img/progress.gif": staticImgProgressGif,
	"static/img/race.gif": staticImgRaceGif,
	"static/img/race_1.png": staticImgRace_1Png,
	"static/img/race_2.png": staticImgRace_2Png,
	"static/img/race_3.png": staticImgRace_3Png,
	"static/img/rolling.gif": staticImgRollingGif,
	"static/img/squares.gif": staticImgSquaresGif,
	"static/img/squares2.gif": staticImgSquares2Gif,
	"static/img/stat.png": staticImgStatPng,
	"static/img/us-ru.png": staticImgUsRuPng,
	"static/js/Serpent.js": staticJsSerpentJs,
	"static/js/aes.js": staticJsAesJs,
	"static/js/asn1hex-1.1.js": staticJsAsn1hex11Js,
	"static/js/asn1hex-1.1.min.js": staticJsAsn1hex11MinJs,
	"static/js/asn1hex-1.js": staticJsAsn1hex1Js,
	"static/js/base64.js": staticJsBase64Js,
	"static/js/bootstrap-alert.js": staticJsBootstrapAlertJs,
	"static/js/bootstrap-button.js": staticJsBootstrapButtonJs,
	"static/js/bootstrap-carousel.js": staticJsBootstrapCarouselJs,
	"static/js/bootstrap-collapse.js": staticJsBootstrapCollapseJs,
	"static/js/bootstrap-dropdown.js": staticJsBootstrapDropdownJs,
	"static/js/bootstrap-modal.js": staticJsBootstrapModalJs,
	"static/js/bootstrap-popover.js": staticJsBootstrapPopoverJs,
	"static/js/bootstrap-scrollspy.js": staticJsBootstrapScrollspyJs,
	"static/js/bootstrap-tab.js": staticJsBootstrapTabJs,
	"static/js/bootstrap-tooltip.js": staticJsBootstrapTooltipJs,
	"static/js/bootstrap-transition.js": staticJsBootstrapTransitionJs,
	"static/js/bootstrap-typeahead.js": staticJsBootstrapTypeaheadJs,
	"static/js/bootstrap.min.js": staticJsBootstrapMinJs,
	"static/js/chat.js": staticJsChatJs,
	"static/js/cropper.js": staticJsCropperJs,
	"static/js/crypto-js-aes.js": staticJsCryptoJsAesJs,
	"static/js/crypto-js-mode-ecb.js": staticJsCryptoJsModeEcbJs,
	"static/js/crypto-js-pad-iso10126.js": staticJsCryptoJsPadIso10126Js,
	"static/js/dataTables.bootstrap.js": staticJsDatatablesBootstrapJs,
	"static/js/demo/flot-demo.js": staticJsDemoFlotDemoJs,
	"static/js/enc-base64-min.js": staticJsEncBase64MinJs,
	"static/js/hex2a.js": staticJsHex2aJs,
	"static/js/html5shiv.js": staticJsHtml5shivJs,
	"static/js/index.js": staticJsIndexJs,
	"static/js/infobubble.js": staticJsInfobubbleJs,
	"static/js/jquery-1.10.2.js": staticJsJquery1102Js,
	"static/js/jquery-1.11.0.js": staticJsJquery1110Js,
	"static/js/jquery-1.9.1.min.js": staticJsJquery191MinJs,
	"static/js/jquery-ui-sliderAccess.js": staticJsJqueryUiSlideraccessJs,
	"static/js/jquery-ui-timepicker-addon.js": staticJsJqueryUiTimepickerAddonJs,
	"static/js/jquery-ui.min.js": staticJsJqueryUiMinJs,
	"static/js/jquery.Jcrop.js": staticJsJqueryJcropJs,
	"static/js/jquery.dataTables.js": staticJsJqueryDatatablesJs,
	"static/js/jquery.flot.js": staticJsJqueryFlotJs,
	"static/js/jquery.js": staticJsJqueryJs,
	"static/js/jquery.metisMenu.js": staticJsJqueryMetismenuJs,
	"static/js/jquery.min.js": staticJsJqueryMinJs,
	"static/js/jquery.qtip.min.js": staticJsJqueryQtipMinJs,
	"static/js/jquery.tooltipster.min.js": staticJsJqueryTooltipsterMinJs,
	"static/js/jquery.webcam.as3.js": staticJsJqueryWebcamAs3Js,
	"static/js/jquery_002.js": staticJsJquery_002Js,
	"static/js/js.js": staticJsJsJs,
	"static/js/jsbn.js": staticJsJsbnJs,
	"static/js/jsbn2.js": staticJsJsbn2Js,
	"static/js/markerclusterer.js": staticJsMarkerclustererJs,
	"static/js/mcrypt.js": staticJsMcryptJs,
	"static/js/md5.js": staticJsMd5Js,
	"static/js/plugins/flot/excanvas.min.js": staticJsPluginsFlotExcanvasMinJs,
	"static/js/plugins/flot/jquery.flot.js": staticJsPluginsFlotJqueryFlotJs,
	"static/js/plugins/flot/jquery.flot.pie.js": staticJsPluginsFlotJqueryFlotPieJs,
	"static/js/plugins/flot/jquery.flot.resize.js": staticJsPluginsFlotJqueryFlotResizeJs,
	"static/js/plugins/flot/jquery.flot.tooltip.min.js": staticJsPluginsFlotJqueryFlotTooltipMinJs,
	"static/js/plugins/metisMenu/metisMenu.min.js": staticJsPluginsMetismenuMetismenuMinJs,
	"static/js/plugins/modal/bootstrap-modal.js": staticJsPluginsModalBootstrapModalJs,
	"static/js/plugins/modal/bootstrap-modalmanager.js": staticJsPluginsModalBootstrapModalmanagerJs,
	"static/js/prng4.js": staticJsPrng4Js,
	"static/js/respond.min.js": staticJsRespondMinJs,
	"static/js/rijndael.js": staticJsRijndaelJs,
	"static/js/ripemd160.js": staticJsRipemd160Js,
	"static/js/rng.js": staticJsRngJs,
	"static/js/rsa.js": staticJsRsaJs,
	"static/js/rsa2.js": staticJsRsa2Js,
	"static/js/rsapem-1.1.js": staticJsRsapem11Js,
	"static/js/rsapem-1.1.min.js": staticJsRsapem11MinJs,
	"static/js/rsapem-1.js": staticJsRsapem1Js,
	"static/js/rsasign-1.2.js": staticJsRsasign12Js,
	"static/js/rsasign-1.2.min.js": staticJsRsasign12MinJs,
	"static/js/rsasign-1.js": staticJsRsasign1Js,
	"static/js/sAS3Cam.js": staticJsSas3camJs,
	"static/js/sb-admin-2.js": staticJsSbAdmin2Js,
	"static/js/sb-admin.js": staticJsSbAdminJs,
	"static/js/sha1.js": staticJsSha1Js,
	"static/js/sha256.js": staticJsSha256Js,
	"static/js/sha512.js": staticJsSha512Js,
	"static/js/spin.js": staticJsSpinJs,
	"static/js/spots.js": staticJsSpotsJs,
	"static/js/stacktable.js": staticJsStacktableJs,
	"static/js/unixtime.js": staticJsUnixtimeJs,
	"static/js/uploader.js": staticJsUploaderJs,
	"static/js/worker.js": staticJsWorkerJs,
	"static/js/x509-1.1.js": staticJsX50911Js,
	"static/js/x509-1.1.min.js": staticJsX50911MinJs,
	"static/js/youtube_webcam.js": staticJsYoutube_webcamJs,
	"static/lang/1.ini": staticLang1Ini,
	"static/lang/42.ini": staticLang42Ini,
	"static/lang/en-us.all.json": staticLangEnUsAllJson,
	"static/lang/locale_en-US.ini": staticLangLocale_enUsIni,
	"static/lang/locale_ru-RU.ini": staticLangLocale_ruRuIni,
	"static/nodes.inc": staticNodesInc,
	"static/swf/sAS3Cam.swf": staticSwfSas3camSwf,
	"static/templates/.directory": staticTemplatesDirectory,
	"static/templates/abuse.html": staticTemplatesAbuseHtml,
	"static/templates/add_cf_project_data.html": staticTemplatesAdd_cf_project_dataHtml,
	"static/templates/admin_variables.html": staticTemplatesAdmin_variablesHtml,
	"static/templates/alert_success.html": staticTemplatesAlert_successHtml,
	"static/templates/arbitration.html": staticTemplatesArbitrationHtml,
	"static/templates/arbitration_arbitrator.html": staticTemplatesArbitration_arbitratorHtml,
	"static/templates/arbitration_buyer.html": staticTemplatesArbitration_buyerHtml,
	"static/templates/arbitration_seller.html": staticTemplatesArbitration_sellerHtml,
	"static/templates/assignments.html": staticTemplatesAssignmentsHtml,
	"static/templates/assignments_new_miner.html": staticTemplatesAssignments_new_minerHtml,
	"static/templates/assignments_promised_amount.html": staticTemplatesAssignments_promised_amountHtml,
	"static/templates/auto_payments.html": staticTemplatesAuto_paymentsHtml,
	"static/templates/available_keys.html": staticTemplatesAvailable_keysHtml,
	"static/templates/block_explorer.html": staticTemplatesBlock_explorerHtml,
	"static/templates/bug_reporting.html": staticTemplatesBug_reportingHtml,
	"static/templates/cash_request_in.html": staticTemplatesCash_request_inHtml,
	"static/templates/cash_request_out.html": staticTemplatesCash_request_outHtml,
	"static/templates/cf_catalog.html": staticTemplatesCf_catalogHtml,
	"static/templates/cf_page_preview.html": staticTemplatesCf_page_previewHtml,
	"static/templates/cf_project_change_category.html": staticTemplatesCf_project_change_categoryHtml,
	"static/templates/cf_start.html": staticTemplatesCf_startHtml,
	"static/templates/change_arbitrator_conditions.html": staticTemplatesChange_arbitrator_conditionsHtml,
	"static/templates/change_avatar.html": staticTemplatesChange_avatarHtml,
	"static/templates/change_commission.html": staticTemplatesChange_commissionHtml,
	"static/templates/change_country_race.html": staticTemplatesChange_country_raceHtml,
	"static/templates/change_creditor.html": staticTemplatesChange_creditorHtml,
	"static/templates/change_geolocation.html": staticTemplatesChange_geolocationHtml,
	"static/templates/change_host.html": staticTemplatesChange_hostHtml,
	"static/templates/change_key_close.html": staticTemplatesChange_key_closeHtml,
	"static/templates/change_key_request.html": staticTemplatesChange_key_requestHtml,
	"static/templates/change_money_back_time.html": staticTemplatesChange_money_back_timeHtml,
	"static/templates/change_node_key.html": staticTemplatesChange_node_keyHtml,
	"static/templates/change_pool.html": staticTemplatesChange_poolHtml,
	"static/templates/change_primary_key.html": staticTemplatesChange_primary_keyHtml,
	"static/templates/change_promised_amount.html": staticTemplatesChange_promised_amountHtml,
	"static/templates/chat.html": staticTemplatesChatHtml,
	"static/templates/credits.html": staticTemplatesCreditsHtml,
	"static/templates/currency_exchange.html": staticTemplatesCurrency_exchangeHtml,
	"static/templates/currency_exchange_delete.html": staticTemplatesCurrency_exchange_deleteHtml,
	"static/templates/db_info.html": staticTemplatesDb_infoHtml,
	"static/templates/db_info_nodes.html": staticTemplatesDb_info_nodesHtml,
	"static/templates/del_cf_funding.html": staticTemplatesDel_cf_fundingHtml,
	"static/templates/del_cf_project.html": staticTemplatesDel_cf_projectHtml,
	"static/templates/del_credit.html": staticTemplatesDel_creditHtml,
	"static/templates/del_pool_user.html": staticTemplatesDel_pool_userHtml,
	"static/templates/del_promised_amount.html": staticTemplatesDel_promised_amountHtml,
	"static/templates/e_main.html": staticTemplatesE_mainHtml,
	"static/templates/e_my_finance.html": staticTemplatesE_my_financeHtml,
	"static/templates/e_my_history.html": staticTemplatesE_my_historyHtml,
	"static/templates/e_my_orders.html": staticTemplatesE_my_ordersHtml,
	"static/templates/e_pages.html": staticTemplatesE_pagesHtml,
	"static/templates/e_redirect.html": staticTemplatesE_redirectHtml,
	"static/templates/exchange_admin.html": staticTemplatesExchange_adminHtml,
	"static/templates/first_select.html": staticTemplatesFirst_selectHtml,
	"static/templates/for_repaid_fix.html": staticTemplatesFor_repaid_fixHtml,
	"static/templates/holidays_list.html": staticTemplatesHolidays_listHtml,
	"static/templates/home.html": staticTemplatesHomeHtml,
	"static/templates/home0.html": staticTemplatesHome0Html,
	"static/templates/index.html": staticTemplatesIndexHtml,
	"static/templates/index_cf.html": staticTemplatesIndex_cfHtml,
	"static/templates/index_e.html": staticTemplatesIndex_eHtml,
	"static/templates/information.html": staticTemplatesInformationHtml,
	"static/templates/install_step_0.html": staticTemplatesInstall_step_0Html,
	"static/templates/install_step_1.html": staticTemplatesInstall_step_1Html,
	"static/templates/interface.html": staticTemplatesInterfaceHtml,
	"static/templates/login.html": staticTemplatesLoginHtml,
	"static/templates/menu.html": staticTemplatesMenuHtml,
	"static/templates/mining_menu.html": staticTemplatesMining_menuHtml,
	"static/templates/mining_promised_amount.html": staticTemplatesMining_promised_amountHtml,
	"static/templates/modal.html": staticTemplatesModalHtml,
	"static/templates/money_back.html": staticTemplatesMoney_backHtml,
	"static/templates/money_back_request.html": staticTemplatesMoney_back_requestHtml,
	"static/templates/my_cf_projects.html": staticTemplatesMy_cf_projectsHtml,
	"static/templates/new_auto_payment.html": staticTemplatesNew_auto_paymentHtml,
	"static/templates/new_cf_project.html": staticTemplatesNew_cf_projectHtml,
	"static/templates/new_credit.html": staticTemplatesNew_creditHtml,
	"static/templates/new_holidays.html": staticTemplatesNew_holidaysHtml,
	"static/templates/new_promised_amount.html": staticTemplatesNew_promised_amountHtml,
	"static/templates/new_user.html": staticTemplatesNew_userHtml,
	"static/templates/node_config.html": staticTemplatesNode_configHtml,
	"static/templates/notifications.html": staticTemplatesNotificationsHtml,
	"static/templates/points.html": staticTemplatesPointsHtml,
	"static/templates/pool_admin.html": staticTemplatesPool_adminHtml,
	"static/templates/pool_admin_login.html": staticTemplatesPool_admin_loginHtml,
	"static/templates/progress.html": staticTemplatesProgressHtml,
	"static/templates/progress_bar.html": staticTemplatesProgress_barHtml,
	"static/templates/promised_amount_actualization.html": staticTemplatesPromised_amount_actualizationHtml,
	"static/templates/promised_amount_list.html": staticTemplatesPromised_amount_listHtml,
	"static/templates/repayment_credit.html": staticTemplatesRepayment_creditHtml,
	"static/templates/restoring_access.html": staticTemplatesRestoring_accessHtml,
	"static/templates/rewrite_primary_key.html": staticTemplatesRewrite_primary_keyHtml,
	"static/templates/set_password.html": staticTemplatesSet_passwordHtml,
	"static/templates/setup_password.html": staticTemplatesSetup_passwordHtml,
	"static/templates/sign_up_in_the_pool.html": staticTemplatesSign_up_in_the_poolHtml,
	"static/templates/signatures.html": staticTemplatesSignaturesHtml,
	"static/templates/statistic.html": staticTemplatesStatisticHtml,
	"static/templates/statistic_voting.html": staticTemplatesStatistic_votingHtml,
	"static/templates/updating_blockchain.html": staticTemplatesUpdating_blockchainHtml,
	"static/templates/upgrade.html": staticTemplatesUpgradeHtml,
	"static/templates/upgrade_0.html": staticTemplatesUpgrade_0Html,
	"static/templates/upgrade_1_and_2.html": staticTemplatesUpgrade_1_and_2Html,
	"static/templates/upgrade_3.html": staticTemplatesUpgrade_3Html,
	"static/templates/upgrade_4.html": staticTemplatesUpgrade_4Html,
	"static/templates/upgrade_5.html": staticTemplatesUpgrade_5Html,
	"static/templates/upgrade_6.html": staticTemplatesUpgrade_6Html,
	"static/templates/upgrade_7.html": staticTemplatesUpgrade_7Html,
	"static/templates/upgrade_resend.html": staticTemplatesUpgrade_resendHtml,
	"static/templates/vote_for_me.html": staticTemplatesVote_for_meHtml,
	"static/templates/votes_exchange.html": staticTemplatesVotes_exchangeHtml,
	"static/templates/voting.html": staticTemplatesVotingHtml,
	"static/templates/waiting_accept_new_key.html": staticTemplatesWaiting_accept_new_keyHtml,
	"static/templates/wallets_list.html": staticTemplatesWallets_listHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"1block.bin": &bintree{static1blockBin, map[string]*bintree{
		}},
		"css": &bintree{nil, map[string]*bintree{
			"AS3Cam.css": &bintree{staticCssAs3camCss, map[string]*bintree{
			}},
			"Jcrop.gif": &bintree{staticCssJcropGif, map[string]*bintree{
			}},
			"bootstrap-modal.css": &bintree{staticCssBootstrapModalCss, map[string]*bintree{
			}},
			"bootstrap-responsive.css": &bintree{staticCssBootstrapResponsiveCss, map[string]*bintree{
			}},
			"bootstrap.css": &bintree{staticCssBootstrapCss, map[string]*bintree{
			}},
			"bootstrap.min.css": &bintree{staticCssBootstrapMinCss, map[string]*bintree{
			}},
			"cf.css": &bintree{staticCssCfCss, map[string]*bintree{
			}},
			"cropper.css": &bintree{staticCssCropperCss, map[string]*bintree{
			}},
			"dataTables.bootstrap.css": &bintree{staticCssDatatablesBootstrapCss, map[string]*bintree{
			}},
			"font-awesome.css": &bintree{staticCssFontAwesomeCss, map[string]*bintree{
			}},
			"jquery-ui-timepicker-addon.css": &bintree{staticCssJqueryUiTimepickerAddonCss, map[string]*bintree{
			}},
			"jquery-ui.css": &bintree{staticCssJqueryUiCss, map[string]*bintree{
			}},
			"jquery.Jcrop.css": &bintree{staticCssJqueryJcropCss, map[string]*bintree{
			}},
			"jquery.Jcrop.min.css": &bintree{staticCssJqueryJcropMinCss, map[string]*bintree{
			}},
			"jquery.css": &bintree{staticCssJqueryCss, map[string]*bintree{
			}},
			"jquery.qtip.min.css": &bintree{staticCssJqueryQtipMinCss, map[string]*bintree{
			}},
			"plugins": &bintree{nil, map[string]*bintree{
				"metisMenu": &bintree{nil, map[string]*bintree{
					"metisMenu.min.css": &bintree{staticCssPluginsMetismenuMetismenuMinCss, map[string]*bintree{
					}},
				}},
			}},
			"progress.css": &bintree{staticCssProgressCss, map[string]*bintree{
			}},
			"sb-admin-2.css": &bintree{staticCssSbAdmin2Css, map[string]*bintree{
			}},
			"sb-admin.css": &bintree{staticCssSbAdminCss, map[string]*bintree{
			}},
			"social-buttons.css": &bintree{staticCssSocialButtonsCss, map[string]*bintree{
			}},
			"tooltipster-shadow.css": &bintree{staticCssTooltipsterShadowCss, map[string]*bintree{
			}},
			"tooltipster.css": &bintree{staticCssTooltipsterCss, map[string]*bintree{
			}},
			"upgrade.css": &bintree{staticCssUpgradeCss, map[string]*bintree{
			}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"FontAwesome.otf": &bintree{staticFontsFontawesomeOtf, map[string]*bintree{
			}},
			"OpenSans-Regular.ttf": &bintree{staticFontsOpensansRegularTtf, map[string]*bintree{
			}},
			"fontawesome-webfont.eot": &bintree{staticFontsFontawesomeWebfontEot, map[string]*bintree{
			}},
			"fontawesome-webfont.svg": &bintree{staticFontsFontawesomeWebfontSvg, map[string]*bintree{
			}},
			"fontawesome-webfont.ttf": &bintree{staticFontsFontawesomeWebfontTtf, map[string]*bintree{
			}},
			"fontawesome-webfont.woff": &bintree{staticFontsFontawesomeWebfontWoff, map[string]*bintree{
			}},
			"luxisr.ttf": &bintree{staticFontsLuxisrTtf, map[string]*bintree{
			}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			".directory": &bintree{staticImgDirectory, map[string]*bintree{
			}},
			"alert.png": &bintree{staticImgAlertPng, map[string]*bintree{
			}},
			"anonim.png": &bintree{staticImgAnonimPng, map[string]*bintree{
			}},
			"blank.png": &bintree{staticImgBlankPng, map[string]*bintree{
			}},
			"cf_blurb_img.png": &bintree{staticImgCf_blurb_imgPng, map[string]*bintree{
			}},
			"face.jpg": &bintree{staticImgFaceJpg, map[string]*bintree{
			}},
			"glyphicons-halflings.png": &bintree{staticImgGlyphiconsHalflingsPng, map[string]*bintree{
			}},
			"k_bg.png": &bintree{staticImgK_bgPng, map[string]*bintree{
			}},
			"k_bg.psd": &bintree{staticImgK_bgPsd, map[string]*bintree{
			}},
			"k_bg_pass.png": &bintree{staticImgK_bg_passPng, map[string]*bintree{
			}},
			"k_db_pass.psd": &bintree{staticImgK_db_passPsd, map[string]*bintree{
			}},
			"load.gif": &bintree{staticImgLoadGif, map[string]*bintree{
			}},
			"logo-2.png": &bintree{staticImgLogo2Png, map[string]*bintree{
			}},
			"logo-small.png": &bintree{staticImgLogoSmallPng, map[string]*bintree{
			}},
			"logo.png": &bintree{staticImgLogoPng, map[string]*bintree{
			}},
			"main_loader.gif": &bintree{staticImgMain_loaderGif, map[string]*bintree{
			}},
			"noavatar.png": &bintree{staticImgNoavatarPng, map[string]*bintree{
			}},
			"pers.jpg": &bintree{staticImgPersJpg, map[string]*bintree{
			}},
			"photo.png": &bintree{staticImgPhotoPng, map[string]*bintree{
			}},
			"profile.jpg": &bintree{staticImgProfileJpg, map[string]*bintree{
			}},
			"progress.gif": &bintree{staticImgProgressGif, map[string]*bintree{
			}},
			"race.gif": &bintree{staticImgRaceGif, map[string]*bintree{
			}},
			"race_1.png": &bintree{staticImgRace_1Png, map[string]*bintree{
			}},
			"race_2.png": &bintree{staticImgRace_2Png, map[string]*bintree{
			}},
			"race_3.png": &bintree{staticImgRace_3Png, map[string]*bintree{
			}},
			"rolling.gif": &bintree{staticImgRollingGif, map[string]*bintree{
			}},
			"squares.gif": &bintree{staticImgSquaresGif, map[string]*bintree{
			}},
			"squares2.gif": &bintree{staticImgSquares2Gif, map[string]*bintree{
			}},
			"stat.png": &bintree{staticImgStatPng, map[string]*bintree{
			}},
			"us-ru.png": &bintree{staticImgUsRuPng, map[string]*bintree{
			}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"Serpent.js": &bintree{staticJsSerpentJs, map[string]*bintree{
			}},
			"aes.js": &bintree{staticJsAesJs, map[string]*bintree{
			}},
			"asn1hex-1.1.js": &bintree{staticJsAsn1hex11Js, map[string]*bintree{
			}},
			"asn1hex-1.1.min.js": &bintree{staticJsAsn1hex11MinJs, map[string]*bintree{
			}},
			"asn1hex-1.js": &bintree{staticJsAsn1hex1Js, map[string]*bintree{
			}},
			"base64.js": &bintree{staticJsBase64Js, map[string]*bintree{
			}},
			"bootstrap-alert.js": &bintree{staticJsBootstrapAlertJs, map[string]*bintree{
			}},
			"bootstrap-button.js": &bintree{staticJsBootstrapButtonJs, map[string]*bintree{
			}},
			"bootstrap-carousel.js": &bintree{staticJsBootstrapCarouselJs, map[string]*bintree{
			}},
			"bootstrap-collapse.js": &bintree{staticJsBootstrapCollapseJs, map[string]*bintree{
			}},
			"bootstrap-dropdown.js": &bintree{staticJsBootstrapDropdownJs, map[string]*bintree{
			}},
			"bootstrap-modal.js": &bintree{staticJsBootstrapModalJs, map[string]*bintree{
			}},
			"bootstrap-popover.js": &bintree{staticJsBootstrapPopoverJs, map[string]*bintree{
			}},
			"bootstrap-scrollspy.js": &bintree{staticJsBootstrapScrollspyJs, map[string]*bintree{
			}},
			"bootstrap-tab.js": &bintree{staticJsBootstrapTabJs, map[string]*bintree{
			}},
			"bootstrap-tooltip.js": &bintree{staticJsBootstrapTooltipJs, map[string]*bintree{
			}},
			"bootstrap-transition.js": &bintree{staticJsBootstrapTransitionJs, map[string]*bintree{
			}},
			"bootstrap-typeahead.js": &bintree{staticJsBootstrapTypeaheadJs, map[string]*bintree{
			}},
			"bootstrap.min.js": &bintree{staticJsBootstrapMinJs, map[string]*bintree{
			}},
			"chat.js": &bintree{staticJsChatJs, map[string]*bintree{
			}},
			"cropper.js": &bintree{staticJsCropperJs, map[string]*bintree{
			}},
			"crypto-js-aes.js": &bintree{staticJsCryptoJsAesJs, map[string]*bintree{
			}},
			"crypto-js-mode-ecb.js": &bintree{staticJsCryptoJsModeEcbJs, map[string]*bintree{
			}},
			"crypto-js-pad-iso10126.js": &bintree{staticJsCryptoJsPadIso10126Js, map[string]*bintree{
			}},
			"dataTables.bootstrap.js": &bintree{staticJsDatatablesBootstrapJs, map[string]*bintree{
			}},
			"demo": &bintree{nil, map[string]*bintree{
				"flot-demo.js": &bintree{staticJsDemoFlotDemoJs, map[string]*bintree{
				}},
			}},
			"enc-base64-min.js": &bintree{staticJsEncBase64MinJs, map[string]*bintree{
			}},
			"hex2a.js": &bintree{staticJsHex2aJs, map[string]*bintree{
			}},
			"html5shiv.js": &bintree{staticJsHtml5shivJs, map[string]*bintree{
			}},
			"index.js": &bintree{staticJsIndexJs, map[string]*bintree{
			}},
			"infobubble.js": &bintree{staticJsInfobubbleJs, map[string]*bintree{
			}},
			"jquery-1.10.2.js": &bintree{staticJsJquery1102Js, map[string]*bintree{
			}},
			"jquery-1.11.0.js": &bintree{staticJsJquery1110Js, map[string]*bintree{
			}},
			"jquery-1.9.1.min.js": &bintree{staticJsJquery191MinJs, map[string]*bintree{
			}},
			"jquery-ui-sliderAccess.js": &bintree{staticJsJqueryUiSlideraccessJs, map[string]*bintree{
			}},
			"jquery-ui-timepicker-addon.js": &bintree{staticJsJqueryUiTimepickerAddonJs, map[string]*bintree{
			}},
			"jquery-ui.min.js": &bintree{staticJsJqueryUiMinJs, map[string]*bintree{
			}},
			"jquery.Jcrop.js": &bintree{staticJsJqueryJcropJs, map[string]*bintree{
			}},
			"jquery.dataTables.js": &bintree{staticJsJqueryDatatablesJs, map[string]*bintree{
			}},
			"jquery.flot.js": &bintree{staticJsJqueryFlotJs, map[string]*bintree{
			}},
			"jquery.js": &bintree{staticJsJqueryJs, map[string]*bintree{
			}},
			"jquery.metisMenu.js": &bintree{staticJsJqueryMetismenuJs, map[string]*bintree{
			}},
			"jquery.min.js": &bintree{staticJsJqueryMinJs, map[string]*bintree{
			}},
			"jquery.qtip.min.js": &bintree{staticJsJqueryQtipMinJs, map[string]*bintree{
			}},
			"jquery.tooltipster.min.js": &bintree{staticJsJqueryTooltipsterMinJs, map[string]*bintree{
			}},
			"jquery.webcam.as3.js": &bintree{staticJsJqueryWebcamAs3Js, map[string]*bintree{
			}},
			"jquery_002.js": &bintree{staticJsJquery_002Js, map[string]*bintree{
			}},
			"js.js": &bintree{staticJsJsJs, map[string]*bintree{
			}},
			"jsbn.js": &bintree{staticJsJsbnJs, map[string]*bintree{
			}},
			"jsbn2.js": &bintree{staticJsJsbn2Js, map[string]*bintree{
			}},
			"markerclusterer.js": &bintree{staticJsMarkerclustererJs, map[string]*bintree{
			}},
			"mcrypt.js": &bintree{staticJsMcryptJs, map[string]*bintree{
			}},
			"md5.js": &bintree{staticJsMd5Js, map[string]*bintree{
			}},
			"plugins": &bintree{nil, map[string]*bintree{
				"flot": &bintree{nil, map[string]*bintree{
					"excanvas.min.js": &bintree{staticJsPluginsFlotExcanvasMinJs, map[string]*bintree{
					}},
					"jquery.flot.js": &bintree{staticJsPluginsFlotJqueryFlotJs, map[string]*bintree{
					}},
					"jquery.flot.pie.js": &bintree{staticJsPluginsFlotJqueryFlotPieJs, map[string]*bintree{
					}},
					"jquery.flot.resize.js": &bintree{staticJsPluginsFlotJqueryFlotResizeJs, map[string]*bintree{
					}},
					"jquery.flot.tooltip.min.js": &bintree{staticJsPluginsFlotJqueryFlotTooltipMinJs, map[string]*bintree{
					}},
				}},
				"metisMenu": &bintree{nil, map[string]*bintree{
					"metisMenu.min.js": &bintree{staticJsPluginsMetismenuMetismenuMinJs, map[string]*bintree{
					}},
				}},
				"modal": &bintree{nil, map[string]*bintree{
					"bootstrap-modal.js": &bintree{staticJsPluginsModalBootstrapModalJs, map[string]*bintree{
					}},
					"bootstrap-modalmanager.js": &bintree{staticJsPluginsModalBootstrapModalmanagerJs, map[string]*bintree{
					}},
				}},
			}},
			"prng4.js": &bintree{staticJsPrng4Js, map[string]*bintree{
			}},
			"respond.min.js": &bintree{staticJsRespondMinJs, map[string]*bintree{
			}},
			"rijndael.js": &bintree{staticJsRijndaelJs, map[string]*bintree{
			}},
			"ripemd160.js": &bintree{staticJsRipemd160Js, map[string]*bintree{
			}},
			"rng.js": &bintree{staticJsRngJs, map[string]*bintree{
			}},
			"rsa.js": &bintree{staticJsRsaJs, map[string]*bintree{
			}},
			"rsa2.js": &bintree{staticJsRsa2Js, map[string]*bintree{
			}},
			"rsapem-1.1.js": &bintree{staticJsRsapem11Js, map[string]*bintree{
			}},
			"rsapem-1.1.min.js": &bintree{staticJsRsapem11MinJs, map[string]*bintree{
			}},
			"rsapem-1.js": &bintree{staticJsRsapem1Js, map[string]*bintree{
			}},
			"rsasign-1.2.js": &bintree{staticJsRsasign12Js, map[string]*bintree{
			}},
			"rsasign-1.2.min.js": &bintree{staticJsRsasign12MinJs, map[string]*bintree{
			}},
			"rsasign-1.js": &bintree{staticJsRsasign1Js, map[string]*bintree{
			}},
			"sAS3Cam.js": &bintree{staticJsSas3camJs, map[string]*bintree{
			}},
			"sb-admin-2.js": &bintree{staticJsSbAdmin2Js, map[string]*bintree{
			}},
			"sb-admin.js": &bintree{staticJsSbAdminJs, map[string]*bintree{
			}},
			"sha1.js": &bintree{staticJsSha1Js, map[string]*bintree{
			}},
			"sha256.js": &bintree{staticJsSha256Js, map[string]*bintree{
			}},
			"sha512.js": &bintree{staticJsSha512Js, map[string]*bintree{
			}},
			"spin.js": &bintree{staticJsSpinJs, map[string]*bintree{
			}},
			"spots.js": &bintree{staticJsSpotsJs, map[string]*bintree{
			}},
			"stacktable.js": &bintree{staticJsStacktableJs, map[string]*bintree{
			}},
			"unixtime.js": &bintree{staticJsUnixtimeJs, map[string]*bintree{
			}},
			"uploader.js": &bintree{staticJsUploaderJs, map[string]*bintree{
			}},
			"worker.js": &bintree{staticJsWorkerJs, map[string]*bintree{
			}},
			"x509-1.1.js": &bintree{staticJsX50911Js, map[string]*bintree{
			}},
			"x509-1.1.min.js": &bintree{staticJsX50911MinJs, map[string]*bintree{
			}},
			"youtube_webcam.js": &bintree{staticJsYoutube_webcamJs, map[string]*bintree{
			}},
		}},
		"lang": &bintree{nil, map[string]*bintree{
			"1.ini": &bintree{staticLang1Ini, map[string]*bintree{
			}},
			"42.ini": &bintree{staticLang42Ini, map[string]*bintree{
			}},
			"en-us.all.json": &bintree{staticLangEnUsAllJson, map[string]*bintree{
			}},
			"locale_en-US.ini": &bintree{staticLangLocale_enUsIni, map[string]*bintree{
			}},
			"locale_ru-RU.ini": &bintree{staticLangLocale_ruRuIni, map[string]*bintree{
			}},
		}},
		"nodes.inc": &bintree{staticNodesInc, map[string]*bintree{
		}},
		"swf": &bintree{nil, map[string]*bintree{
			"sAS3Cam.swf": &bintree{staticSwfSas3camSwf, map[string]*bintree{
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			".directory": &bintree{staticTemplatesDirectory, map[string]*bintree{
			}},
			"abuse.html": &bintree{staticTemplatesAbuseHtml, map[string]*bintree{
			}},
			"add_cf_project_data.html": &bintree{staticTemplatesAdd_cf_project_dataHtml, map[string]*bintree{
			}},
			"admin_variables.html": &bintree{staticTemplatesAdmin_variablesHtml, map[string]*bintree{
			}},
			"alert_success.html": &bintree{staticTemplatesAlert_successHtml, map[string]*bintree{
			}},
			"arbitration.html": &bintree{staticTemplatesArbitrationHtml, map[string]*bintree{
			}},
			"arbitration_arbitrator.html": &bintree{staticTemplatesArbitration_arbitratorHtml, map[string]*bintree{
			}},
			"arbitration_buyer.html": &bintree{staticTemplatesArbitration_buyerHtml, map[string]*bintree{
			}},
			"arbitration_seller.html": &bintree{staticTemplatesArbitration_sellerHtml, map[string]*bintree{
			}},
			"assignments.html": &bintree{staticTemplatesAssignmentsHtml, map[string]*bintree{
			}},
			"assignments_new_miner.html": &bintree{staticTemplatesAssignments_new_minerHtml, map[string]*bintree{
			}},
			"assignments_promised_amount.html": &bintree{staticTemplatesAssignments_promised_amountHtml, map[string]*bintree{
			}},
			"auto_payments.html": &bintree{staticTemplatesAuto_paymentsHtml, map[string]*bintree{
			}},
			"available_keys.html": &bintree{staticTemplatesAvailable_keysHtml, map[string]*bintree{
			}},
			"block_explorer.html": &bintree{staticTemplatesBlock_explorerHtml, map[string]*bintree{
			}},
			"bug_reporting.html": &bintree{staticTemplatesBug_reportingHtml, map[string]*bintree{
			}},
			"cash_request_in.html": &bintree{staticTemplatesCash_request_inHtml, map[string]*bintree{
			}},
			"cash_request_out.html": &bintree{staticTemplatesCash_request_outHtml, map[string]*bintree{
			}},
			"cf_catalog.html": &bintree{staticTemplatesCf_catalogHtml, map[string]*bintree{
			}},
			"cf_page_preview.html": &bintree{staticTemplatesCf_page_previewHtml, map[string]*bintree{
			}},
			"cf_project_change_category.html": &bintree{staticTemplatesCf_project_change_categoryHtml, map[string]*bintree{
			}},
			"cf_start.html": &bintree{staticTemplatesCf_startHtml, map[string]*bintree{
			}},
			"change_arbitrator_conditions.html": &bintree{staticTemplatesChange_arbitrator_conditionsHtml, map[string]*bintree{
			}},
			"change_avatar.html": &bintree{staticTemplatesChange_avatarHtml, map[string]*bintree{
			}},
			"change_commission.html": &bintree{staticTemplatesChange_commissionHtml, map[string]*bintree{
			}},
			"change_country_race.html": &bintree{staticTemplatesChange_country_raceHtml, map[string]*bintree{
			}},
			"change_creditor.html": &bintree{staticTemplatesChange_creditorHtml, map[string]*bintree{
			}},
			"change_geolocation.html": &bintree{staticTemplatesChange_geolocationHtml, map[string]*bintree{
			}},
			"change_host.html": &bintree{staticTemplatesChange_hostHtml, map[string]*bintree{
			}},
			"change_key_close.html": &bintree{staticTemplatesChange_key_closeHtml, map[string]*bintree{
			}},
			"change_key_request.html": &bintree{staticTemplatesChange_key_requestHtml, map[string]*bintree{
			}},
			"change_money_back_time.html": &bintree{staticTemplatesChange_money_back_timeHtml, map[string]*bintree{
			}},
			"change_node_key.html": &bintree{staticTemplatesChange_node_keyHtml, map[string]*bintree{
			}},
			"change_pool.html": &bintree{staticTemplatesChange_poolHtml, map[string]*bintree{
			}},
			"change_primary_key.html": &bintree{staticTemplatesChange_primary_keyHtml, map[string]*bintree{
			}},
			"change_promised_amount.html": &bintree{staticTemplatesChange_promised_amountHtml, map[string]*bintree{
			}},
			"chat.html": &bintree{staticTemplatesChatHtml, map[string]*bintree{
			}},
			"credits.html": &bintree{staticTemplatesCreditsHtml, map[string]*bintree{
			}},
			"currency_exchange.html": &bintree{staticTemplatesCurrency_exchangeHtml, map[string]*bintree{
			}},
			"currency_exchange_delete.html": &bintree{staticTemplatesCurrency_exchange_deleteHtml, map[string]*bintree{
			}},
			"db_info.html": &bintree{staticTemplatesDb_infoHtml, map[string]*bintree{
			}},
			"db_info_nodes.html": &bintree{staticTemplatesDb_info_nodesHtml, map[string]*bintree{
			}},
			"del_cf_funding.html": &bintree{staticTemplatesDel_cf_fundingHtml, map[string]*bintree{
			}},
			"del_cf_project.html": &bintree{staticTemplatesDel_cf_projectHtml, map[string]*bintree{
			}},
			"del_credit.html": &bintree{staticTemplatesDel_creditHtml, map[string]*bintree{
			}},
			"del_pool_user.html": &bintree{staticTemplatesDel_pool_userHtml, map[string]*bintree{
			}},
			"del_promised_amount.html": &bintree{staticTemplatesDel_promised_amountHtml, map[string]*bintree{
			}},
			"e_main.html": &bintree{staticTemplatesE_mainHtml, map[string]*bintree{
			}},
			"e_my_finance.html": &bintree{staticTemplatesE_my_financeHtml, map[string]*bintree{
			}},
			"e_my_history.html": &bintree{staticTemplatesE_my_historyHtml, map[string]*bintree{
			}},
			"e_my_orders.html": &bintree{staticTemplatesE_my_ordersHtml, map[string]*bintree{
			}},
			"e_pages.html": &bintree{staticTemplatesE_pagesHtml, map[string]*bintree{
			}},
			"e_redirect.html": &bintree{staticTemplatesE_redirectHtml, map[string]*bintree{
			}},
			"exchange_admin.html": &bintree{staticTemplatesExchange_adminHtml, map[string]*bintree{
			}},
			"first_select.html": &bintree{staticTemplatesFirst_selectHtml, map[string]*bintree{
			}},
			"for_repaid_fix.html": &bintree{staticTemplatesFor_repaid_fixHtml, map[string]*bintree{
			}},
			"holidays_list.html": &bintree{staticTemplatesHolidays_listHtml, map[string]*bintree{
			}},
			"home.html": &bintree{staticTemplatesHomeHtml, map[string]*bintree{
			}},
			"home0.html": &bintree{staticTemplatesHome0Html, map[string]*bintree{
			}},
			"index.html": &bintree{staticTemplatesIndexHtml, map[string]*bintree{
			}},
			"index_cf.html": &bintree{staticTemplatesIndex_cfHtml, map[string]*bintree{
			}},
			"index_e.html": &bintree{staticTemplatesIndex_eHtml, map[string]*bintree{
			}},
			"information.html": &bintree{staticTemplatesInformationHtml, map[string]*bintree{
			}},
			"install_step_0.html": &bintree{staticTemplatesInstall_step_0Html, map[string]*bintree{
			}},
			"install_step_1.html": &bintree{staticTemplatesInstall_step_1Html, map[string]*bintree{
			}},
			"interface.html": &bintree{staticTemplatesInterfaceHtml, map[string]*bintree{
			}},
			"login.html": &bintree{staticTemplatesLoginHtml, map[string]*bintree{
			}},
			"menu.html": &bintree{staticTemplatesMenuHtml, map[string]*bintree{
			}},
			"mining_menu.html": &bintree{staticTemplatesMining_menuHtml, map[string]*bintree{
			}},
			"mining_promised_amount.html": &bintree{staticTemplatesMining_promised_amountHtml, map[string]*bintree{
			}},
			"modal.html": &bintree{staticTemplatesModalHtml, map[string]*bintree{
			}},
			"money_back.html": &bintree{staticTemplatesMoney_backHtml, map[string]*bintree{
			}},
			"money_back_request.html": &bintree{staticTemplatesMoney_back_requestHtml, map[string]*bintree{
			}},
			"my_cf_projects.html": &bintree{staticTemplatesMy_cf_projectsHtml, map[string]*bintree{
			}},
			"new_auto_payment.html": &bintree{staticTemplatesNew_auto_paymentHtml, map[string]*bintree{
			}},
			"new_cf_project.html": &bintree{staticTemplatesNew_cf_projectHtml, map[string]*bintree{
			}},
			"new_credit.html": &bintree{staticTemplatesNew_creditHtml, map[string]*bintree{
			}},
			"new_holidays.html": &bintree{staticTemplatesNew_holidaysHtml, map[string]*bintree{
			}},
			"new_promised_amount.html": &bintree{staticTemplatesNew_promised_amountHtml, map[string]*bintree{
			}},
			"new_user.html": &bintree{staticTemplatesNew_userHtml, map[string]*bintree{
			}},
			"node_config.html": &bintree{staticTemplatesNode_configHtml, map[string]*bintree{
			}},
			"notifications.html": &bintree{staticTemplatesNotificationsHtml, map[string]*bintree{
			}},
			"points.html": &bintree{staticTemplatesPointsHtml, map[string]*bintree{
			}},
			"pool_admin.html": &bintree{staticTemplatesPool_adminHtml, map[string]*bintree{
			}},
			"pool_admin_login.html": &bintree{staticTemplatesPool_admin_loginHtml, map[string]*bintree{
			}},
			"progress.html": &bintree{staticTemplatesProgressHtml, map[string]*bintree{
			}},
			"progress_bar.html": &bintree{staticTemplatesProgress_barHtml, map[string]*bintree{
			}},
			"promised_amount_actualization.html": &bintree{staticTemplatesPromised_amount_actualizationHtml, map[string]*bintree{
			}},
			"promised_amount_list.html": &bintree{staticTemplatesPromised_amount_listHtml, map[string]*bintree{
			}},
			"repayment_credit.html": &bintree{staticTemplatesRepayment_creditHtml, map[string]*bintree{
			}},
			"restoring_access.html": &bintree{staticTemplatesRestoring_accessHtml, map[string]*bintree{
			}},
			"rewrite_primary_key.html": &bintree{staticTemplatesRewrite_primary_keyHtml, map[string]*bintree{
			}},
			"set_password.html": &bintree{staticTemplatesSet_passwordHtml, map[string]*bintree{
			}},
			"setup_password.html": &bintree{staticTemplatesSetup_passwordHtml, map[string]*bintree{
			}},
			"sign_up_in_the_pool.html": &bintree{staticTemplatesSign_up_in_the_poolHtml, map[string]*bintree{
			}},
			"signatures.html": &bintree{staticTemplatesSignaturesHtml, map[string]*bintree{
			}},
			"statistic.html": &bintree{staticTemplatesStatisticHtml, map[string]*bintree{
			}},
			"statistic_voting.html": &bintree{staticTemplatesStatistic_votingHtml, map[string]*bintree{
			}},
			"updating_blockchain.html": &bintree{staticTemplatesUpdating_blockchainHtml, map[string]*bintree{
			}},
			"upgrade.html": &bintree{staticTemplatesUpgradeHtml, map[string]*bintree{
			}},
			"upgrade_0.html": &bintree{staticTemplatesUpgrade_0Html, map[string]*bintree{
			}},
			"upgrade_1_and_2.html": &bintree{staticTemplatesUpgrade_1_and_2Html, map[string]*bintree{
			}},
			"upgrade_3.html": &bintree{staticTemplatesUpgrade_3Html, map[string]*bintree{
			}},
			"upgrade_4.html": &bintree{staticTemplatesUpgrade_4Html, map[string]*bintree{
			}},
			"upgrade_5.html": &bintree{staticTemplatesUpgrade_5Html, map[string]*bintree{
			}},
			"upgrade_6.html": &bintree{staticTemplatesUpgrade_6Html, map[string]*bintree{
			}},
			"upgrade_7.html": &bintree{staticTemplatesUpgrade_7Html, map[string]*bintree{
			}},
			"upgrade_resend.html": &bintree{staticTemplatesUpgrade_resendHtml, map[string]*bintree{
			}},
			"vote_for_me.html": &bintree{staticTemplatesVote_for_meHtml, map[string]*bintree{
			}},
			"votes_exchange.html": &bintree{staticTemplatesVotes_exchangeHtml, map[string]*bintree{
			}},
			"voting.html": &bintree{staticTemplatesVotingHtml, map[string]*bintree{
			}},
			"waiting_accept_new_key.html": &bintree{staticTemplatesWaiting_accept_new_keyHtml, map[string]*bintree{
			}},
			"wallets_list.html": &bintree{staticTemplatesWallets_listHtml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

